Би́товое поле (англ. bit field) в программировании — некоторое количество бит, расположенных последовательно в памяти, значение которых процессор не способен прочитать из-за особенностей аппаратной реализации.

Об аппаратных реализациях
Если требуется прочитать значение, записанное в ячейку памяти, процессор выполняет следующие действия:

выставляет адрес ячейки на шину адреса;
выставляет код команды «чтение» на шину управления;
читает значение с шины данных.
Прочитанное значение равно значению, находящемуся в указанной ячейке памяти, и имеет размер, равный разрядности шины данных (размеру машинного слова).
Разрядность шины адреса определяет минимально адресуемый размер памяти. Контроллер памяти требует, чтобы адрес ячейки был выровнен по границе машинного слова.
Если разрядность (количество бит) значения, которое требуется прочитать (битового поля), не равна размеру машинного слова, после чтения машинного слова из памяти требуется выполнение дополнительных инструкций:

инструкции and — операции «битовое И» (используется для записи значения 0 в биты слова, не входящие в битовое поле (или выбора бит по маске));
инструкции shr — логического сдвига бит вправо (используется для сдвига бит битового поля в младшие разряды машинного слова).Пример. Пусть:

размер машинного слова равен 32 бита;
в ячейке памяти, расположенной по выровненному адресу, записано значение:0011 0100 1010 1110 0100 0111 0100 11002требуется прочитать биты, выделенные жирным шрифтом. Процессор прочитает из памяти машинное слово, равное исходному значению:0011 0100 1010 1110 0100 0111 0100 11002 С помощью инструкции and в биты, не входящие в битовое поле, будут записаны значения 0. Результат:0000 0000 0000 0010 0100 000 0000 00002 С помощью инструкции shr биты битового поля будут сдвинуты слева направо так, чтобы младший бит битового поля стал младшим битом машинного слова. Результат:0000 0000 0000 0000 0000 0000 0000 10012Если адрес значения, которое требуется прочитать из памяти, не выровнен по границе машинного слова, требуется выполнение дополнительных действий:

чтение двух значений (двух машинных слов) из двух смежных ячеек памяти, адреса которых выровнены;
«выделение» из двух прочитанных машинных слов значений нужных бит с помощью дополнительных инструкций and, shr и shl (сдвиг влево);
конкатенация (склейка) полученных значений с помощью инструкции or — операции «битовое ИЛИ».Пример. Пусть:

размер машинного слова равен 32 бита;
в двух смежных ячейках памяти, расположенных по выровненным адресам, записаны два значения:0011 0100 1010 1110 0100 0111 0100 11002
0011 0100 1010 1110 0100 0111 0100 11002требуется прочитать биты, выделенные жирным шрифтом и расположенные по не выровненному адресу. Процессор прочитает из памяти два машинных слова, содержащих нужные биты; значения равны исходным:0011 0100 1010 1110 0100 0111 0100 11002
0011 0100 1010 1110 0100 0111 0100 11002 С помощью двух инструкций and в биты, не входящие в битовое поле, будут записаны значения 0. Результат:0000 0000 0000 0000 0000 0001 0100 11002
0011 0100 0000 0000 0000 0000 0000 00002 С помощью инструкции shr биты второго машинного слова будут сдвинуты слева направо так, чтобы младший бит битового поля стал младшим битом машинного слова. С помощью инструкции shl биты первого машинного слова будут сдвинуты справа налево так, чтобы освободить младшие разряды для бит второго машинного слова (для следующего шага). Результат:0000 0000 0000 0000 0101 0011 0000 00002
0000 0000 0000 0000 0000 0000 0000 11012 С помощью инструкции or биты двух машинных слов будут «наложены» друг на друга. Результат:0000 0000 0000 0000 0101 0011 0000 11012Описанные дополнительные действия могут выполняться:

программистом вручную;
компилятором (при наличии поддержки такой возможности);
процессором (при наличии поддержки такой возможности).Недостаток: дополнительные команды замедляют выполнение программы. Достоинство: при использовании битовых полей достигается максимально плотная упаковка информации.

О компиляторах
Компиляторы, как правило, позволяют выполнять с битовыми полями только следующие операции:

чтение значения из битового поля;
запись значения в битовое поле.Само битовое поле воспринимается компилятором как число без знака. Порядок расположения битовых полей в структуре данных зависит от аппаратной платформы и реализации компилятора: одни компиляторы размещают битовые поля, начиная с младших битов, а другие — начиная со старших.

Применение
Битовые поля применяются для максимально полной упаковки информации, если не важна скорость доступа к этой информации. Например, для увеличения пропускной способности канала при передаче информации по сети или для уменьшения размера информации при хранении. Также использование битовых полей оправдано, если процессор поддерживает специализированные инструкции для работы с битовыми полями, а компилятор использует эти инструкции при генерировании машинного кода.
Например, на машинах с 32-битовым словом все поля IPv4-пакета (кроме полей «адрес отправителя» и «адрес получателя») будут битовыми полями, так как их размер не равен 32 битам и их адреса не кратны 4 байтам. Если, в дополнение к этому, процессор поддерживает прямое чтение и запись 8- и 16-битовых чисел, битовыми полями будут только поля «версия», «размер заголовка», «DSCP», «ECN», флаги и «смещение фрагмента».

Операции над многобитовыми полями
Пусть в одном байте находятся четыре битовых поля:

битовые поля a и b, занимающие по одному биту;
битовое поле c, занимающее 2 бита;
битовое поле d, занимающее 4 бита.Значение восьмибитового числа x, составленного из битовых полей a, b, c и d, можно вычислить по формуле:

  
    
      
        x
        =
        a
        ⋅
        
          2
          
            0
          
        
        +
        b
        ⋅
        
          2
          
            1
          
        
        +
        c
        ⋅
        
          2
          
            2
          
        
        +
        d
        ⋅
        
          2
          
            4
          
        
      
    
    {\displaystyle x=a\cdot 2^{0}+b\cdot 2^{1}+c\cdot 2^{2}+d\cdot 2^{4}}
   (1).
Если a=1, b=0, c=2=102 и d=5=01012, число x будет равно 
  
    
      
        x
        =
        
          
            
              0101
              ⏟
            
          
          
            d
          
        
        
          
            
              10
              ⏟
            
          
          
            c
          
        
        
          
            
              0
              ⏟
            
          
          
            b
          
        
        
          
            
              1
              ⏟
            
          
          
            a
          
        
        =
        1
        ⋅
        
          2
          
            0
          
        
        +
        0
        ⋅
        
          2
          
            1
          
        
        +
        2
        ⋅
        
          2
          
            2
          
        
        +
        5
        ⋅
        
          2
          
            4
          
        
        =
        89
      
    
    {\displaystyle x=\underbrace {0101} _{d}\underbrace {10} _{c}\underbrace {0} _{b}\underbrace {1} _{a}=1\cdot 2^{0}+0\cdot 2^{1}+2\cdot 2^{2}+5\cdot 2^{4}=89}
  .

Сборка одного числа из битовых полей
Если процессор оперирует двоичными числами, формула (1) может быть оптимизирована. После замены операций «возведение в степень» на «логический сдвиг», «умножения» на «битовое ИЛИ» формула (1) примет вид:

Логический сдвиг двоичного числа эквивалентен умножению/делению на число, кратное степени двойки: 21=2, 22=4, 23=8 и т. д.

Извлечение битового поля
Получить значение v некоторого битового поля числа x можно двумя способами:

v = ( x & mask_1 ) >> offset;
v = ( x >> offset ) & mask_2.При первом способе сначала выполняется операция «битовое И», затем — логический сдвиг вправо. При втором способе операции выполняются в обратном порядке. Константа mask_2 может быть получена из константы mask_1:mask_2 = mask_1 >> offset.offset — номер первого младшего бита битового поля v, показатель степени в формуле (1).
Для получения значения битового поля из числа x первым способом выполняют три операции:

вычисляют «битовую маску» mask_1 — число, у которого в соответствующих битовому полю разрядах установлены единицы, а в остальных разрядах — нули; умножают «битовую маску» на число с помощью операции «битовое И»;
выполняют логический сдвиг вправо на offset бит.Пример получения значения из битового поля c:

При втором способе:

выполняют логический сдвиг вправо;
вычисляют «битовую маску» mask_2 — число, у которого в первых n младших разрядах установлены единицы, а остальных разрядах — нули; n — число разрядов битового поля; умножают «битовую маску» на число с помощью операции «битовое И».Пример получения значения из битового поля c:

Для младшего битового поля (поля a в данном примере) логический сдвиг на ноль разрядов не выполняется. Пример:a = ( x & 00000001b ) >> 0a = ( x >> 0 ) & 00000001b )

При втором способе для старшего поля (поля d в данном примере) логическое умножение не выполняется, так как операция логического сдвига вправо добавляет в число нулевые биты. Пример:d = ( x >> 4 ) & 00001111b )

Замена битового поля
Для замены битового поля выполняют три операции:

вычисляют маску — число, у которого в битах, соответствующих битовому полю, установлены нули;
операцией «битовое И» умножают число x на маску; операция выполняет установку нулей в биты, соответствующие маске;
операцией «битовое включающее ИЛИ» складывают полученное произведение и число x, сдвинутое на количество битов, соответствующее смещению битового поля от начала слова.Пример замены значения для битового поля d:

Операции над однобитовыми полями
Для работы с битовыми полями шириной в один бит существуют более простые методы.
Битовые поля a и b занимают по одному биту.

Проверка отдельного бита
Для получения значения отдельного бита выполняют логическое умножение (операцию «битовое И») числа x на маску, у которой установлен один бит, соответствующий биту однобитового поля. Если результат равен 0, бит равен 0.
Пример получения значения однобитового поля b:

Для проверки равенства единице одного или нескольких бит из группы берут маску, у которой в позициях проверяемых бит установлены единицы:

Для проверки равенства единице всех бит из группы используют «побитовое И» и операцию «==»:

Установка битов
Для установки битов выполняют логическое сложение (операцию «битовое ИЛИ») числа x с маской, у которой в позициях, соответствующих битовому полю, установлены единицы.
Пример установки бита однобитового поля a:

Для установки нескольких битов числа x, например, битов однобитовых полей a и b, используют маску, у которой в битах, соответствующих битам битовых полей, установлены единицы:

Снятие битов
Для установки в один или несколько битов нулей число x операцией «битовое И» умножают на маску, у которой в позициях, соответствующих битовому полю, установлены нулевые биты.
Пример установки нулей в биты битового поля b:

Переключение битов
Для изменения значения битов на противоположное (с 0 на 1 и с 1 на 0) число x операцией «битовое исключающее ИЛИ» складывают с маской, у которой в позициях, соответствующих позициям переключаемых битов, установлены единицы.
Пример изменения значений бит битового поля b:

Операции над знаковыми полями в дополнительном коде
В памяти компьютера целые отрицательные числа могут кодироваться одним из следующих способов:

прямой код;
обратный код;
дополнительный код.Большинство современных процессоров реализуют третий способ.
Рассмотрим двоичное представление нескольких целых чисел в дополнительном коде:

 4 = 000001002
 3 = 000000112
 2 = 000000102
 1 = 000000012
 0 = 000000002
-1 = 111111112
-2 = 111111102
-3 = 111111012
-4 = 111111002
и т. д.

Пусть поля c и d имеют формат «дополнительный код». Тогда поле c может хранить числа от −2=102 до 1=012, а поле d — от −8=10002 до 7=01112.

Сборка и замена чисел
Каждое из слагаемых (кроме старшего), чтобы оно не испортило более старшие разряды, требуется умножать на битовую маску соответствующей длины. В частности:

x = (d << 4) + ((c & 00000011b) << 2) + (b << 1) + a

Извлечение чисел
Для извлечения чисел требуется сдвинуть поле на нужное количество битов вправо, заодно размножив знаковый бит. Например, для этого можно воспользоваться арифметическим сдвигом. Если x имеет длину 8 битов, то

c = (x << 4 ) >>a 6
d = x >>a 4

Внимание! В языке программирования Java всё наоборот: знаком >> обозначается арифметический сдвиг, а знаком >>> — логический.
Если арифметического сдвига нет, то…

c1 = x >> 2
если (c1 & 00000010b ≠ 0)
  то c = c1 | 0x11111100b
  иначе c = c1 & 0x00000011b

Объявления битовых полей
В языках C и C++ при объявлении (англ. declaration) битового поля используется символ двоеточия (:). После двоеточия указывается константное выражение, определяющее количество битов в битовом поле. Пример:

См. также
Битовые операции
Битовая карта
Битовая маска


== Примечания ==