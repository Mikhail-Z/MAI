В информатике, спи́сок (англ. list) — это абстрактный тип данных, представляющий собой упорядоченный набор значений, в котором некоторое значение может встречаться более одного раза. Экземпляр списка является компьютерной реализацией математического понятия конечной последовательности.
Экземпляры значений, находящихся в списке, называются элементами списка (англ. item, entry либо element); если значение встречается несколько раз, каждое вхождение считается отдельным элементом.

Термином список также называется несколько конкретных структур данных, применяющихся при реализации абстрактных списков, особенно связных списков.

Определение
При помощи нотации метода синтаксически-ориентированного конструирования Ч. Хоара определение списка можно записать следующим образом:

  
    
      
        L
        i
        s
        t
        (
        A
        )
        =
        N
        I
        L
        +
        (
        A
        ×
        L
        i
        s
        t
        (
        A
        )
        )
      
    
    {\displaystyle List(A)=NIL+(A\times List(A))}
  

  
    
      
        p
        r
        e
        f
        i
        x
        =
        
          constructor
        
      
    
    {\displaystyle prefix={\text{constructor}}}
   
  
    
      
        L
        i
        s
        t
        (
        A
        )
      
    
    {\displaystyle List(A)}
  

  
    
      
        h
        e
        a
        d
        ,
        t
        a
        i
        l
        =
        
          selectors
        
      
    
    {\displaystyle head,tail={\text{selectors}}}
   
  
    
      
        L
        i
        s
        t
        (
        A
        )
      
    
    {\displaystyle List(A)}
  

  
    
      
        n
        u
        l
        l
        ,
        n
        o
        n
        n
        u
        l
        l
        =
        
          predicates
        
      
    
    {\displaystyle null,nonnull={\text{predicates}}}
   
  
    
      
        L
        i
        s
        t
        (
        A
        )
      
    
    {\displaystyle List(A)}
  

  
    
      
        N
        I
        L
        ,
        n
        o
        n
        N
        I
        L
        =
        
          parts
        
      
    
    {\displaystyle NIL,nonNIL={\text{parts}}}
   
  
    
      
        L
        i
        s
        t
        (
        A
        )
      
    
    {\displaystyle List(A)}
  Первая строка данного определения обозначает, что список элементов типа 
  
    
      
        A
      
    
    {\displaystyle A}
   (говорят: «список над 
  
    
      
        A
      
    
    {\displaystyle A}
  ») представляет собой размеченное объединение пустого списка и декартова произведения атома типа 
  
    
      
        A
      
    
    {\displaystyle A}
   со списком над 
  
    
      
        A
      
    
    {\displaystyle A}
  . Для создания списков используются два конструктора (вторая строка определения), первый из которых создаёт пустой список, а второй — непустой соответственно. Вполне понятно, что второй конструктор получает на вход в качестве параметров некоторый атом и список, а возвращает список, первым элементом которого является исходный атом, а остальными — элементы исходного списка. То есть получается префиксация атома к списку, с чем и связано такое наименование конструктора. Здесь необходимо отметить, что пустой список 
  
    
      
        [
        ]
      
    
    {\displaystyle []}
   не является атомом, а потому не может префиксироваться. С другой стороны, пустой список является как бы нулевым элементом для конструирования списков, поэтому любой список содержит в самом своём конце именно пустой список — с него начинается конструирование.
Третья строка определяет селекторы для списка, то есть операции для доступа к элементам внутри списка. Селектор 
  
    
      
        h
        e
        a
        d
      
    
    {\displaystyle head}
   получает на вход список и возвращает первый элемент этого списка, то есть типом результата является тип 
  
    
      
        A
      
    
    {\displaystyle A}
  . Этот селектор не может получить на вход пустой список — в этом случае результат операции неопределён. Селектор 
  
    
      
        t
        a
        i
        l
      
    
    {\displaystyle tail}
   возвращает список, полученный из входного в результате отсечения его головы (первого элемента). Этот селектор также не может принимать на вход пустой список, так как в этом случае результат операции неопределён. При помощи этих двух операций можно достать из списка любой элемент. Например, чтобы получить третий элемент списка (если он имеется),
необходимо последовательно два раза применить селектор 
  
    
      
        t
        a
        i
        l
      
    
    {\displaystyle tail}
  , после чего применить селектор 
  
    
      
        h
        e
        a
        d
      
    
    {\displaystyle head}
  . Другими словами, для получения элемента списка, который находится на позиции 
  
    
      
        n
      
    
    {\displaystyle n}
   (начиная с 
  
    
      
        0
      
    
    {\displaystyle 0}
   для первого элемента, как это принято в программировании), необходимо 
  
    
      
        n
      
    
    {\displaystyle n}
   раз применить селектор 
  
    
      
        t
        a
        i
        l
      
    
    {\displaystyle tail}
  ,
после чего применить селектор 
  
    
      
        h
        e
        a
        d
      
    
    {\displaystyle head}
  .
Четвёртая строка определения описывает предикаты для списка, то есть функции, возвращающие булевское значение в зависимости от некоторых условий. Первый предикат возвращает значение 
  
    
      
        t
        r
        u
        e
      
    
    {\displaystyle true}
   в случае, если заданный список пуст. Второй предикат действует наоборот. Наконец, пятая строка описывает части списка, которые, как уже сказано, представляют собой пустой и непустой списки.

Свойства
У определённой таким образом структуры данных имеются некоторые свойства:

Размер списка — количество элементов в нём, исключая последний «нулевой» элемент, являющийся по определению пустым списком.
Тип элементов — тот самый тип 
  
    
      
        A
      
    
    {\displaystyle A}
  , над которым строится список; все элементы в списке должны быть этого типа.
Отсортированность — список может быть отсортирован в соответствии с некоторыми критериями сортировки (например, по возрастанию целочисленных значений, если список состоит из целых чисел).
Возможности доступа — некоторые списки в зависимости от реализации могут обеспечивать программиста селекторами для доступа непосредственно к заданному по номеру элементу.
Сравниваемость — списки можно сравнивать друг с другом на соответствие, причём в зависимости от реализации операция сравнения списков может использовать разные технологии.Как должно быть понятно из названия рассматриваемой структуры данных, списки используются для хранения наборов однотипных элементов. Такие элементы могут быть отсортированы для использования в функциях поиска или функциях для быстрой вставки новых элементов в список.

Списки в языках программирования
Функциональные языки
Списки в функциональных языках являются фундаментальной структурой. Большинство функциональных языков имеет встроенные средства для работы со списками вроде получения длины списка, головы (первый элемент списка), хвоста (часть списка, идущая за первым элементом), применения функции к каждому элементу списка (Map), свертки списка и пр.

Язык Haskell
Язык Lisp
Императивные языки
См. также
XOR-связный список
Линейный список
Развёрнутый связный список
Связный список
Список с пропусками


== Примечания ==