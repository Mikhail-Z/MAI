Описательные ло́гики или дескрипцио́нные ло́гики(сокр. ДЛ, англ. description logics, иногда используется неточный перевод: дескрипти́вные логики) — семейство языков представления знаний, позволяющих описывать понятия предметной области в недвусмысленном, формализованном виде. Они сочетают в себе, с одной стороны, богатые выразительные возможности, а с другой — хорошие вычислительные свойства, такие как разрешимость и относительно невысокая вычислительная сложность основных логических проблем, что делает возможным их применение на практике. Таким образом, ДЛ представляют собой компромисс между выразительностью и разрешимостью. ДЛ можно рассматривать как разрешимые фрагменты логики предикатов, синтаксически же они близки к модальным логикам.
Своё современное название ДЛ получили в 1980-х. Прежние названия (в хронологическом порядке): терминологические системы, логики концептов. Изначально ДЛ зародились как расширение фреймовых структур и семантических сетей механизмами формальной логики. В настоящее время ДЛ являются важным понятием в концепции семантической паутины, где их предполагается использовать при построении онтологий. Фрагменты OWL-DL и OWL-Lite языка веб-онтологий OWL также основаны на ДЛ.

Общие сведения
Дескрипционные логики оперируют понятиями конце́пт и роль, соответствующими в других разделах математической логики понятиям «одноместный предикат» (или множество, класс) и «двуместный предикат» (или бинарное отношение). Интуитивно, концепты используются для описания классов некоторых объектов, например, «Люди», «Женщины», «Машины». Роли используются для описания двуместных отношений между объектами, например, на множестве людей имеется двуместное отношение «X есть_родитель_для Y», а между людьми и машинами имеется двуместное отношение «X имеет_в_собственности Y», где в качестве X и Y можно подставлять произвольные предметы. С помощью языка ДЛ можно формулировать утверждения общего вида — о классах вообще (всякая Женщина есть Человек, всякая Машина имеется_в_собственности не более чем у одного Человека) и частного вида — о конкретных объектах (Мария есть Женщина, Иван имеет_в_собственности Машину1).
На жаргоне ДЛ набор утверждений общего вида или терминологии (англ. terminology) называется TBox, набор утверждений (англ. assertions) частного вида — ABox, а вместе они составляют так называемую базу знаний или онтологию. Многочисленные онтологии построены и строятся в самых различных предметных областях, таких как биоинформатика, генетика, медицина, химия, биология. Как только онтология построена, встает вопрос о том, как можно извлекать знания, следующие из содержащихся в онтологии знаний, можно ли это делать программно и каковы соответствующие алгоритмы. Все эти вопросы решаются теоретически в науке «дескрипционная логика», а практически уже реализовано множество программных систем — механизмов рассуждений (англ. reasoners), которые и позволяют автоматизированно выводить знания из онтологий и производить другие операции с онтологиями.

Синтаксис
В математической логике всякий язык характеризуется своим синтаксисом, то есть правилами построения выражений этого языка, и семантикой, то есть способом приписывания этим выражениям некоторого формального значения, например, указанием, какие выражения считаются истинными и ложными.
Чтобы сформулировать синтаксис какой-либо ДЛ, необходимо задать непустые (и обычно конечные) множества символов — так называемых атомарных концептов и атомарных ролей — из которых будут строиться выражения языка данной логики. Конкретная ДЛ характеризуется набором конструкторов и индуктивным правилом, с помощью которого составные концепты данной логики строятся из атомарных концептов и атомарных ролей, используя эти конструкторы.
Типичными конструкторами для построения составных концептов являются:

пересечение (или конъюнкция) концептов, обозначается как 
  
    
      
        C
        ⊓
        D
      
    
    {\displaystyle C\sqcap D}
  ;
объединение (или дизъюнкция) концептов, обозначается как 
  
    
      
        C
        ⊔
        D
      
    
    {\displaystyle C\sqcup D}
  ;
дополнение (или отрицание) концепта, обозначается как 
  
    
      
        ¬
        C
      
    
    {\displaystyle \neg C}
  ;
ограничение на значения роли (или ограничение квантором всеобщности), обозначается как 
  
    
      
        ∀
        R
        .
        C
      
    
    {\displaystyle \forall R.C}
  ;
экзистенциальное ограничение (или ограничение квантором существования), обозначается как 
  
    
      
        ∃
        R
        .
        C
      
    
    {\displaystyle \exists R.C}
  ;
численные ограничения на значения роли, например: 
  
    
      
        (
        
          ≤
        
        n
        
        R
        )
      
    
    {\displaystyle ({\leq }n\,R)}
  , 
  
    
      
        (
        
          ≥
        
        n
        
        R
        .
        C
        )
      
    
    {\displaystyle ({\geq }n\,R.C)}
  , и другие.Как видим, в ДЛ конъюнкция и дизъюнкция обозначаются иначе, чтобы подчеркнуть отличие от других видов логик. Существуют дескрипционные логики, в которых имеются также составные роли, строящиеся из простых ролей с помощью операций: инверсии, пересечения, объединения, дополнения, композиции ролей, транзитивного замыкания и других.

Синтаксис логики ALC
Дескрипционная логика 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   (от Attributive Language with Complement) была введена в 1991 году и является одной из базовых ДЛ, на основе которой строятся многие другие ДЛ. Пусть заданы непустые конечные множества атомарных концептов и атомарных ролей. Тогда следующее является индуктивным определением составных концептов логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   (для краткости в этом определении будем называть их просто концептами):

всякий атомарный концепт является концептом;
выражения 
  
    
      
        ⊤
      
    
    {\displaystyle \top }
   и 
  
    
      
        ⊥
      
    
    {\displaystyle \bot }
   являются концептами;
если 
  
    
      
        C
      
    
    {\displaystyle C}
   есть концепт, то его дополнение 
  
    
      
        ¬
        C
      
    
    {\displaystyle \neg C}
   является концептом;
если 
  
    
      
        C
      
    
    {\displaystyle C}
   и 
  
    
      
        D
      
    
    {\displaystyle D}
   есть концепты, то их пересечение 
  
    
      
        C
        ⊓
        D
      
    
    {\displaystyle C\sqcap D}
   и объединение 
  
    
      
        C
        ⊔
        D
      
    
    {\displaystyle C\sqcup D}
   являются концептами;
если 
  
    
      
        C
      
    
    {\displaystyle C}
   есть концепт, а 
  
    
      
        R
      
    
    {\displaystyle R}
   есть роль, то выражения 
  
    
      
        ∀
        R
        .
        C
      
    
    {\displaystyle \forall R.C}
   и 
  
    
      
        ∃
        R
        .
        C
      
    
    {\displaystyle \exists R.C}
   являются концептами.Примечание. Строго говоря, 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   — это не одна логика, а семейство логик, где каждая логика этого семейства задается выбором конкретных множеств атомарных концептов и ролей. Это аналогично заданию сигнатуры теории первого порядка. Однако, этим различием обычно пренебрегают, что мы и будем делать в дальнейшем.

Семантика
Семантика ДЛ задается путём интерпретации её атомарных концептов как множеств объектов (индивидов), выбираемых из некоторого фиксированного множества (домена), а атомарных ролей — как множеств пар индивидов, то есть бинарных отношений на домене.
Формально, интерпретация 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   состоит из непустого множества 
  
    
      
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}}
   (домена) и интерпретирующей функции, которая сопоставляет каждому атомарному концепту 
  
    
      
        A
      
    
    {\displaystyle A}
   некоторое подмножество 
  
    
      
        
          
            A
            
              
                I
              
            
          
          ⊆
          
            Δ
            
              
                I
              
            
          
        
      
    
    {\displaystyle {A^{\mathcal {I}}\subseteq \Delta ^{\mathcal {I}}}}
  , а каждой атомарной роли 
  
    
      
        R
      
    
    {\displaystyle R}
   — некоторое подмножество 
  
    
      
        
          
            R
            
              
                I
              
            
          
          ⊆
          
            Δ
            
              
                I
              
            
          
          ×
          
            Δ
            
              
                I
              
            
          
        
      
    
    {\displaystyle {R^{\mathcal {I}}\subseteq \Delta ^{\mathcal {I}}\times \Delta ^{\mathcal {I}}}}
  . Если пара индивидов принадлежит интерпретации некоторой роли 
  
    
      
        R
      
    
    {\displaystyle R}
  , то есть 
  
    
      
        (
        e
        ,
        d
        )
        ∈
        
          R
          
            
              I
            
          
        
      
    
    {\displaystyle (e,d)\in R^{\mathcal {I}}}
  , то говорят, что индивид 
  
    
      
        d
      
    
    {\displaystyle d}
   является 
  
    
      
        R
      
    
    {\displaystyle R}
  -последователем индивида 
  
    
      
        e
      
    
    {\displaystyle e}
  .
Далее интерпретирующая функция распространяется на составные концепты и роли. Поскольку последние в каждой ДЛ свои, то в качестве примера рассмотрим семантику для описанной выше логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  .

Семантика логики ALC
Интерпретирующая функция распространяется на составные концепты логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   по следующим правилам:

  
    
      
        ⊤
      
    
    {\displaystyle \top }
   интерпретируется как весь домен: 
  
    
      
        
          ⊤
          
            
              I
            
          
        
        =
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \top ^{\mathcal {I}}=\Delta ^{\mathcal {I}}}
  

  
    
      
        ⊥
      
    
    {\displaystyle \bot }
   интерпретируется как пустое множество: 
  
    
      
        
          ⊥
          
            
              I
            
          
        
        =
        ∅
      
    
    {\displaystyle \bot ^{\mathcal {I}}=\varnothing }
  
дополнение концепта интерпретируется как дополнение множества: 
  
    
      
        (
        ¬
        C
        
          )
          
            
              I
            
          
        
        =
        
          Δ
          
            
              I
            
          
        
        ∖
        
          C
          
            
              I
            
          
        
      
    
    {\displaystyle (\neg C)^{\mathcal {I}}=\Delta ^{\mathcal {I}}\setminus C^{\mathcal {I}}}
  
пересечение концептов интерпретируется как пересечение множеств: 
  
    
      
        (
        C
        ⊓
        D
        
          )
          
            
              I
            
          
        
        =
        
          C
          
            
              I
            
          
        
        ∩
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle (C\sqcap D)^{\mathcal {I}}=C^{\mathcal {I}}\cap D^{\mathcal {I}}}
  
объединение концептов интерпретируется как объединение множеств: 
  
    
      
        (
        C
        ⊔
        D
        
          )
          
            
              I
            
          
        
        =
        
          C
          
            
              I
            
          
        
        ∪
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle (C\sqcup D)^{\mathcal {I}}=C^{\mathcal {I}}\cup D^{\mathcal {I}}}
  
выражение 
  
    
      
        ∀
        R
        .
        C
      
    
    {\displaystyle \forall R.C}
   интерпретируется как множество тех индивидов, у которых все 
  
    
      
        R
      
    
    {\displaystyle R}
  -последователи принадлежат интерпретации концепта 
  
    
      
        C
      
    
    {\displaystyle C}
  . Формально:
  
    
      
        (
        ∀
        R
        .
        C
        
          )
          
            
              I
            
          
        
        =
        {
        
        e
        ∈
        
          Δ
          
            
              I
            
          
        
        ∣
        ∀
        d
        ∈
        
          Δ
          
            
              I
            
          
        
        :
         
        (
        e
        ,
        d
        )
        ∈
        
          R
          
            
              I
            
          
        
        ⇒
        d
        ∈
        
          C
          
            
              I
            
          
        
        
        }
      
    
    {\displaystyle (\forall R.C)^{\mathcal {I}}=\{\,e\in \Delta ^{\mathcal {I}}\mid \forall d\in \Delta ^{\mathcal {I}}:\ (e,d)\in R^{\mathcal {I}}\Rightarrow d\in C^{\mathcal {I}}\,\}}
  выражение 
  
    
      
        ∃
        R
        .
        C
      
    
    {\displaystyle \exists R.C}
   интерпретируется как множество тех индивидов, у которых имеется 
  
    
      
        R
      
    
    {\displaystyle R}
  -последователь, принадлежащий интерпретации концепта 
  
    
      
        C
      
    
    {\displaystyle C}
  . Формально:
  
    
      
        (
        ∃
        R
        .
        C
        
          )
          
            
              I
            
          
        
        =
        {
        
        e
        ∈
        
          Δ
          
            
              I
            
          
        
        ∣
        ∃
        d
        ∈
        
          Δ
          
            
              I
            
          
        
        :
        (
        e
        ,
        d
        )
        ∈
        
          R
          
            
              I
            
          
        
        ∧
        d
        ∈
        
          C
          
            
              I
            
          
        
        
        }
      
    
    {\displaystyle (\exists R.C)^{\mathcal {I}}=\{\,e\in \Delta ^{\mathcal {I}}\mid \exists d\in \Delta ^{\mathcal {I}}:(e,d)\in R^{\mathcal {I}}\land d\in C^{\mathcal {I}}\,\}}
  Пример. Пусть домен интерпретации 
  
    
      
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}}
   состоит из всех людей, атомарный концепт 
  
    
      
        M
      
    
    {\displaystyle M}
   интерпретирован как множество людей мужского пола, а роль 
  
    
      
        R
      
    
    {\displaystyle R}
   как отношение «есть родитель для». Тогда концепт 
  
    
      
        ∀
        R
        .
        M
      
    
    {\displaystyle \forall R.M}
   будет интерпретирован как множество людей, у которых все дети мужского пола, а концепт 
  
    
      
        M
        ⊓
        ∃
        R
        .
        ⊤
      
    
    {\displaystyle M\sqcap \exists R.\top }
   — как множество «отцов», то есть людей мужского пола, имеющих хотя бы одного ребёнка.

Связь с модальной логикой
На первый взгляд синтаксис ДЛ является непривычным для тех, кто знаком с «традиционными» логиками (логикой высказываний, логикой предикатов, модальной логикой и др.). Однако уже в 1991 году было замечено, что ДЛ 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   есть не что иное, как записанная в других обозначениях модальная логика 
  
    
      
        
          
            K
          
          
            n
          
        
      
    
    {\displaystyle \mathbf {K} _{n}}
  , имеющая 
  
    
      
        n
      
    
    {\displaystyle n}
   независимых модальностей. А именно, если в 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   имеются атомарные концепты 
  
    
      
        
          A
          
            1
          
        
        ,
        …
        ,
        
          A
          
            m
          
        
      
    
    {\displaystyle A_{1},\ldots ,A_{m}}
   и атомарные роли 
  
    
      
        
          R
          
            1
          
        
        ,
        …
        ,
        
          R
          
            n
          
        
      
    
    {\displaystyle R_{1},\ldots ,R_{n}}
  , то соответствие между логиками осуществляется следующим образом:

атомарные концепты 
  
    
      
        
          A
          
            i
          
        
      
    
    {\displaystyle A_{i}}
   переходят в пропозициональные переменные 
  
    
      
        
          p
          
            i
          
        
      
    
    {\displaystyle p_{i}}
   модальной логики;
пересечение 
  
    
      
        ⊓
      
    
    {\displaystyle \sqcap }
  , объединение 
  
    
      
        ⊔
      
    
    {\displaystyle \sqcup }
   и дополнение 
  
    
      
        ¬
      
    
    {\displaystyle \neg }
   концептов переходит в булевы связки конъюнкцию 
  
    
      
        ∧
      
    
    {\displaystyle \land }
  , дизъюнкцию 
  
    
      
        ∨
      
    
    {\displaystyle \lor }
   и отрицание 
  
    
      
        ¬
      
    
    {\displaystyle \neg }
  ;
выражение 
  
    
      
        ∀
        
          R
          
            j
          
        
      
    
    {\displaystyle \forall R_{j}}
   переходит в 
  
    
      
        
          ◻
          
            j
          
        
      
    
    {\displaystyle \Box _{j}}
  , а выражение 
  
    
      
        ∃
        
          R
          
            j
          
        
      
    
    {\displaystyle \exists R_{j}}
   переходит в 
  
    
      
        
          ◊
          
            j
          
        
      
    
    {\displaystyle \Diamond _{j}}
  .Например, концепт 
  
    
      
        ∃
        
          R
          
            1
          
        
        .
        (
        
          A
          
            1
          
        
        ⊔
        ∀
        
          R
          
            2
          
        
        .
        ¬
        
          A
          
            2
          
        
        )
      
    
    {\displaystyle \exists R_{1}.(A_{1}\sqcup \forall R_{2}.\neg A_{2})}
   переходит в модальную формулу 
  
    
      
        
          ◊
          
            1
          
        
        (
        
          p
          
            1
          
        
        ∨
        
          ◻
          
            2
          
        
        
          p
          
            2
          
        
        )
      
    
    {\displaystyle \Diamond _{1}(p_{1}\lor \Box _{2}p_{2})}
  . При таком преобразовании всякий составной концепт логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   превращается в правильно построенную формулу модальной логики 
  
    
      
        
          
            K
          
          
            n
          
        
      
    
    {\displaystyle \mathbf {K} _{n}}
  , причем всякая модальная формула является переводом некоторого концепта (тем самым, это один и тот же язык, только записанный в двух разных системах обозначений). Более того, данное преобразование согласуется с вышеописанной семантикой логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   с одной стороны и семантикой Крипке модальной логики с другой.
Этот прием, применяемый как к описанным двум логикам, так и к различным их расширениям, позволяет перенести в область ДЛ многочисленные известные факты о модальных логиках, например, об их разрешимости, вычислительной сложности, разрешающих процедурах и других важных свойствах (конечности моделей, древовидности моделей и т. п.).

Связь с логикой предикатов
Многие ДЛ, включая 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  , можно рассматривать как фрагменты логики предикатов при «естественном» переводе концептов в предикатные формулы. Если в 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   имеются атомарные концепты 
  
    
      
        
          A
          
            1
          
        
        ,
        …
        ,
        
          A
          
            m
          
        
      
    
    {\displaystyle A_{1},\ldots ,A_{m}}
   и атомарные роли 
  
    
      
        
          R
          
            1
          
        
        ,
        …
        ,
        
          R
          
            n
          
        
      
    
    {\displaystyle R_{1},\ldots ,R_{n}}
  , то для перевода вводятся одноместные предикатные символы 
  
    
      
        
          P
          
            1
          
        
        ,
        …
        ,
        
          P
          
            m
          
        
      
    
    {\displaystyle P_{1},\ldots ,P_{m}}
   и двуместные предикатные символы 
  
    
      
        
          S
          
            1
          
        
        ,
        …
        ,
        
          S
          
            n
          
        
      
    
    {\displaystyle S_{1},\ldots ,S_{n}}
  , а сам перевод задается индуктивно следующим образом:

атомарные концепты 
  
    
      
        
          A
          
            i
          
        
      
    
    {\displaystyle A_{i}}
   переходят в формулы 
  
    
      
        
          P
          
            i
          
        
        (
        x
        )
      
    
    {\displaystyle P_{i}(x)}
  ;
пересечение 
  
    
      
        ⊓
      
    
    {\displaystyle \sqcap }
  , объединение 
  
    
      
        ⊔
      
    
    {\displaystyle \sqcup }
   и дополнение 
  
    
      
        ¬
      
    
    {\displaystyle \neg }
   концептов переходит в булевы связки конъюнкцию 
  
    
      
        ∧
      
    
    {\displaystyle \land }
  , дизъюнкцию 
  
    
      
        ∨
      
    
    {\displaystyle \lor }
   и отрицание 
  
    
      
        ¬
      
    
    {\displaystyle \neg }
  ;
выражение 
  
    
      
        ∀
        
          R
          
            j
          
        
        .
        C
      
    
    {\displaystyle \forall R_{j}.C}
   переходит в 
  
    
      
        ∀
        y
        (
        
          S
          
            j
          
        
        (
        x
        ,
        y
        )
        ⇒
        
          C
          ′
        
        (
        y
        )
        )
      
    
    {\displaystyle \forall y(S_{j}(x,y)\Rightarrow C'(y))}
  ;
выражение 
  
    
      
        ∃
        
          R
          
            j
          
        
        .
        C
      
    
    {\displaystyle \exists R_{j}.C}
   переходит в 
  
    
      
        ∃
        y
        (
        
          S
          
            j
          
        
        (
        x
        ,
        y
        )
        ∧
        
          C
          ′
        
        (
        y
        )
        )
      
    
    {\displaystyle \exists y(S_{j}(x,y)\land C'(y))}
  .В последних двух пунктах переменная 
  
    
      
        y
      
    
    {\displaystyle y}
   — свежая (не встречавшаяся ранее), а 
  
    
      
        
          C
          ′
        
      
    
    {\displaystyle C'}
   есть перевод концепта 
  
    
      
        C
      
    
    {\displaystyle C}
   (который уже построен по предположению индукции).
Легко видеть, что данный перевод согласуется с описанной выше семантикой ДЛ, то есть в любой интерпретации, если атомарные концепты 
  
    
      
        
          A
          
            i
          
        
      
    
    {\displaystyle A_{i}}
   и атомарные роли 
  
    
      
        
          R
          
            j
          
        
      
    
    {\displaystyle R_{j}}
   интерпретированы так же, как соответствующие им предикаты 
  
    
      
        
          P
          
            i
          
        
      
    
    {\displaystyle P_{i}}
   и 
  
    
      
        
          S
          
            j
          
        
      
    
    {\displaystyle S_{j}}
  , то и всякий составной концепт интерпретируется тем же самым множеством, что и соответствующая ему при переводе предикатная формула от одной переменной. Следует также отметить, что не всякая формула логики предикатов является переводом какого-либо концепта; например, формула 
  
    
      
        ∀
        x
        
          P
          
            1
          
        
        (
        x
        )
      
    
    {\displaystyle \forall xP_{1}(x)}
   не является таковой.
В данном переводе можно обойтись всего двумя переменными, и таким образом ДЛ 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   (а также многие её расширения) можно рассматривать как фрагменты логики предикатов с двумя переменными, которая, как известно, разрешима. Данный перевод позволяет переносить результаты о разрешимости, вычислительной сложности, разрешающих алгоритмах и т. п. из области логики предикатов в область дескрипционных логик.

База знаний
Концепты ДЛ интересны не столько сами по себе, сколько как инструмент для записи знаний об описываемой предметной области. Эти знания подразделяются на общие знания о понятиях и их взаимосвязях (интенсиональные знания) и знания об индивидуальных объектах, их свойствах и связях с другими объектами (экстенсиональные знания). Первые более стабильны и постоянны, тогда как вторые более подвержены модификациям.
В соответствии с этим делением, записываемые с помощью языка ДЛ знания подразделяются на

набор терминологических аксиом или TBox 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
   и
набор утверждений об индивидах или ABox 
  
    
      
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {A}}}
  .Совокупность аксиом и утверждений вместе составляют так называемую базу знаний 
  
    
      
        
          
            K
          
        
        =
        
          
            T
          
        
        ∪
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {K}}={\mathcal {T}}\cup {\mathcal {A}}}
  . Далее мы по отдельности рассмотрим виды аксиом и утверждений, из которых может состоять TBox и ABox.

Аксиомы и TBox
Аксиомой вложенности концептов называется выражение вида 
  
    
      
        C
        ⊑
        D
      
    
    {\displaystyle C\sqsubseteq D}
  , а аксиомой эквивалентности концептов — выражение вида 
  
    
      
        C
        ≡
        D
      
    
    {\displaystyle C\equiv D}
  , где 
  
    
      
        C
      
    
    {\displaystyle C}
   и 
  
    
      
        D
      
    
    {\displaystyle D}
   — произвольные концепты. Аналогично, аксиомой вложенности ролей называется выражение вида 
  
    
      
        R
        ⊑
        S
      
    
    {\displaystyle R\sqsubseteq S}
  , а аксиомой эквивалентности ролей — выражение вида 
  
    
      
        R
        ≡
        S
      
    
    {\displaystyle R\equiv S}
  , где 
  
    
      
        R
      
    
    {\displaystyle R}
   и 
  
    
      
        S
      
    
    {\displaystyle S}
   — произвольные роли. Здесь 
  
    
      
        ⊑
      
    
    {\displaystyle \sqsubseteq }
   есть символ вложенности (subsumption).
Терминологией или набором терминологических аксиом или TBox (от англ. terminological box) называется конечный набор аксиом перечисленных видов. Иногда аксиомы для ролей выделяются в отдельный набор и называют его иерархией ролей или RBox. Помимо перечисленных видов аксиом, в терминологии могут допускаться и другие аксиомы (например, транзитивность ролей); о них пойдет речь ниже.
Семантика терминологии определяется естественным образом. Пусть дана интерпретация 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  . Аксиома 
  
    
      
        C
        ⊑
        D
      
    
    {\displaystyle C\sqsubseteq D}
   выполняется в интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , если 
  
    
      
        
          C
          
            
              I
            
          
        
        ⊆
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle C^{\mathcal {I}}\subseteq D^{\mathcal {I}}}
  ; в этом случае также говорят, что 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   является моделью аксиомы 
  
    
      
        C
        ⊑
        D
      
    
    {\displaystyle C\sqsubseteq D}
  . Аналогично для остальных видов аксиом. Терминология 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
   выполняется в интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , а интерпретация 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   называется моделью терминологии 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
  , если 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   является моделью всех входящих в 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
   аксиом.
Пример. Следующая совокупность является терминологией (или TBox) в языке логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  :

  
    
      
        
          
            W
            o
            m
            a
            n
          
        
        ≡
        
          
            P
            e
            r
            s
            o
            n
          
        
        ⊓
        
          
            F
            e
            m
            a
            l
            e
          
        
      
    
    {\displaystyle {\mathsf {Woman}}\equiv {\mathsf {Person}}\sqcap {\mathsf {Female}}}
  

  
    
      
        
          
            M
            o
            t
            h
            e
            r
          
        
        ≡
        
          
            W
            o
            m
            a
            n
          
        
        ⊓
        ∃
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
        .
        ⊤
      
    
    {\displaystyle {\mathsf {Mother}}\equiv {\mathsf {Woman}}\sqcap \exists {\mathsf {hasChild}}.\top }
  

  
    
      
        ∀
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
        .
        
          
            P
            e
            r
            s
            o
            n
          
        
        ⊑
        
          
            P
            e
            r
            s
            o
            n
          
        
      
    
    {\displaystyle \forall {\mathsf {hasChild}}.{\mathsf {Person}}\sqsubseteq {\mathsf {Person}}}
  

  
    
      
        
          
            D
            o
            c
            t
            o
            r
          
        
        ⊑
        
          
            P
            e
            r
            s
            o
            n
          
        
      
    
    {\displaystyle {\mathsf {Doctor}}\sqsubseteq {\mathsf {Person}}}
  

Интуитивно (то есть при «естественной» интерпретации, когда концепту 
  
    
      
        
          
            P
            e
            r
            s
            o
            n
          
        
      
    
    {\displaystyle {\mathsf {Person}}}
   соответствует множество всех людей, роли 
  
    
      
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
      
    
    {\displaystyle {\mathsf {hasChild}}}
   соответствует отношение «имеет_ребенка» и т. д.) эти аксиомы говорят, что быть женщиной означает в точности быть человеком и быть женского пола; быть матерью означает в точности быть женщиной и иметь ребёнка; у всякого человека всякий ребёнок есть тоже человек; всякий доктор является человеком. Первые две аксиомы вместе представляют собой пример так называемой ациклической терминологии.

Утверждения и ABox
Терминологии позволяют записывать общие знания о концептах и ролях. Однако помимо этого обычно требуется также записать знания о конкретных индивидах: к какому классу (концепту) они принадлежат, какими отношениями (ролями) они связаны друг с другом. Это делается в той части базы знаний ДЛ, которая называется ABox (или набор утверждений об индивидах).
С этой целью, помимо атомарных концептов и атомарных ролей, то есть имен для классов и отношений, вводится также конечное множество имён для индивидов. Утверждения об индивидах бывают двух видов:

утверждение о принадлежности индивида 
  
    
      
        a
      
    
    {\displaystyle a}
   концепту 
  
    
      
        C
      
    
    {\displaystyle C}
   — записывается как 
  
    
      
        C
        (
        a
        )
      
    
    {\displaystyle C(a)}
   или 
  
    
      
        a
        :
        C
      
    
    {\displaystyle a\colon C}
  ;
утверждение о связи двух индивидов 
  
    
      
        a
      
    
    {\displaystyle a}
   и 
  
    
      
        b
      
    
    {\displaystyle b}
   ролью 
  
    
      
        R
      
    
    {\displaystyle R}
   — записывается как 
  
    
      
        R
        (
        a
        ,
        b
        )
      
    
    {\displaystyle R(a,b)}
   или 
  
    
      
        (
        a
        ,
        b
        )
        :
        R
      
    
    {\displaystyle (a,b)\colon R}
   или 
  
    
      
        a
        
        R
        
        b
      
    
    {\displaystyle a\,R\,b}
  .Наконец, набором утверждений об индивидах или ABox (от англ. assertional box) называется конечный набор утверждений этих двух видов.
Примечание. В некоторых ДЛ допускаются также утверждения вида 
  
    
      
        ¬
        R
        (
        a
        ,
        b
        )
      
    
    {\displaystyle \neg R(a,b)}
   в ABox.
Чтобы задать семантику ABox, необходимо расширить интерпретацию 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , а именно каждому имени индивида 
  
    
      
        a
      
    
    {\displaystyle a}
   сопоставить некоторый элемент домена 
  
    
      
        
          a
          
            
              I
            
          
        
        ∈
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle a^{\mathcal {I}}\in \Delta ^{\mathcal {I}}}
  . Тогда говорят, что утверждение 
  
    
      
        C
        (
        a
        )
      
    
    {\displaystyle C(a)}
   или 
  
    
      
        R
        (
        a
        ,
        b
        )
      
    
    {\displaystyle R(a,b)}
   выполняются в интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , если имеет место 
  
    
      
        
          a
          
            
              I
            
          
        
        ∈
        
          C
          
            
              I
            
          
        
      
    
    {\displaystyle a^{\mathcal {I}}\in C^{\mathcal {I}}}
   или 
  
    
      
        (
        
          a
          
            
              I
            
          
        
        ,
        
          b
          
            
              I
            
          
        
        )
        ∈
        
          R
          
            
              I
            
          
        
      
    
    {\displaystyle (a^{\mathcal {I}},b^{\mathcal {I}})\in R^{\mathcal {I}}}
  , соответственно. Говорят, что ABox выполняется в интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , а интерпретация 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   является моделью данного ABox, если все его утверждения выполняются в этой интерпретации.
Пример. Следующая совокупность является набором утверждений об индивидах (или ABox) в языке логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  :

  
    
      
        
          
            M
            a
            r
            y
          
        
        :
        
          
            W
            o
            m
            a
            n
          
        
        ⊓
        ¬
        
          
            D
            o
            c
            t
            o
            r
          
        
      
    
    {\displaystyle {\mathsf {Mary}}\colon {\mathsf {Woman}}\sqcap \neg {\mathsf {Doctor}}}
  

  
    
      
        
          
            M
            a
            r
            y
          
        
        :
        ∃
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
        .
        
          
            F
            e
            m
            a
            l
            e
          
        
      
    
    {\displaystyle {\mathsf {Mary}}\colon \exists {\mathsf {hasChild}}.{\mathsf {Female}}}
  

  
    
      
        
          
            M
            a
            r
            y
          
        
        
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
        
        
          
            P
            e
            t
            e
            r
          
        
      
    
    {\displaystyle {\mathsf {Mary}}\,{\mathsf {hasChild}}\,{\mathsf {Peter}}}
  

  
    
      
        
          
            P
            e
            t
            e
            r
          
        
        :
        
          
            D
            o
            c
            t
            o
            r
          
        
        ⊓
        ∀
        
          
            h
            a
            s
            C
            h
            i
            l
            d
          
        
        .
        ⊥
      
    
    {\displaystyle {\mathsf {Peter}}\colon {\mathsf {Doctor}}\sqcap \forall {\mathsf {hasChild}}.\bot }
  

Здесь Mary и Peter есть имена индивидов. Интуитивно эти утверждения означают, что Mary является женщиной, но не доктором, у неё есть ребёнок женского пола, Peter также является ребёнком Mary, причем Peter является доктором и не имеет детей.
Примечание. Часто рассматриваются лишь интерпретации, которые удовлетворяют соглашению об уникальности имён. Оно означает, что разным именам индивидов интерпретация обязана сопоставлять различные элементы домена. Язык OWL по умолчанию не предполагает данное соглашение, однако в нём есть конструкции, с помощью которых можно явно указать, какие имена индивидов считать равным либо различными.

Отличие от баз данных
Помимо того, что базы знаний формулируются в несколько другом языке, нежели базы данных, их главное отличие заключается в использовании в ДЛ при логическом выводе так называемого предположения об открытости мира, тогда как в базах данных принимается предположение о замкнутости мира. Последнее означает, что если некоторое утверждение не является истинным, то оно принимается ложным. Предположение же об открытости мира в этом случае считает такое утверждение ни истинным, ни ложным. Это кардинальным образом влияет на то, какие факты считаются логически следующими из заданной базы знаний, а значит, и на само понятие логического следования в ДЛ.

Выразительные ДЛ
Существуют многочисленные расширения логики 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   дополнительными конструкторами для построения концептов, ролей, а также дополнительными видами аксиом в TBox. Имеется неформальное соглашение об именовании получающихся при этом логик — обычно путём добавления к имени логики букв, отвечающих добавленным в язык конструкторам. Наиболее известными расширениями являются:
Например, логика 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  , расширенная инверсными ролями, номиналами и ограничениями кардинальности ролей, обозначается как 
  
    
      
        
          
            A
            L
            C
            I
            O
            Q
          
        
      
    
    {\displaystyle {\mathcal {ALCIOQ}}}
  .
Примечание. Буква 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
   не добавляется к имени логики, а замещает в нём буквы 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  . Так, например, логика 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  , расширенная инверсными ролями (буква 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  ), качественными ограничениями кардинальности ролей (буква 
  
    
      
        
          
            Q
          
        
      
    
    {\displaystyle {\mathcal {Q}}}
  ), транзитивными ролями (буква 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
  ) и иерархией ролей (буква 
  
    
      
        
          
            H
          
        
      
    
    {\displaystyle {\mathcal {H}}}
  ), имеет название 
  
    
      
        
          
            S
            H
            I
            Q
          
        
      
    
    {\displaystyle {\mathcal {SHIQ}}}
  . Происхождение всех букв понятно из английских названий конструкторов; буква 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
   же была выбрана из-за тесной связи получающейся ДЛ с модальной логикой 
  
    
      
        
          S
          4
        
      
    
    {\displaystyle \mathbf {S4} }
   (хотя в последней буква S означает просто system, саму же логику 
  
    
      
        
          S
          4
        
      
    
    {\displaystyle \mathbf {S4} }
   выделяет среди других модальных логик именно цифра 4).
Примечание. Если в ДЛ присутствуют одновременно буквы 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
  , 
  
    
      
        
          
            H
          
        
      
    
    {\displaystyle {\mathcal {H}}}
   и либо 
  
    
      
        
          
            Q
          
        
      
    
    {\displaystyle {\mathcal {Q}}}
   либо 
  
    
      
        
          
            N
          
        
      
    
    {\displaystyle {\mathcal {N}}}
  , то дополнительное ограничение налагается на правило построения концептов: в концептах вида 
  
    
      
        (
        
          ≤
        
        n
        
        R
        .
        C
        )
      
    
    {\displaystyle ({\leq }n\,R.C)}
   нельзя использовать роли 
  
    
      
        R
      
    
    {\displaystyle R}
  , имеющие (с точки зрения аксиом RBox) транзитивные под-роли. Если не налагать данные ограничения, то логика становится неразрешимой.Рассматриваются также ДЛ, в которых можно строить составные роли с помощью операций объединения, пересечения, дополнения, инверсии, композиции, транзитивного замыкания и других. Кроме того, исследованы ДЛ, в которых имеются многоместные роли (обозначающие n-арные отношения).

Логический анализ
Базы знаний, формулируемые на языке ДЛ, применяются не только для представления знаний о предметной области, но также для логического анализа (reasoning) знаний, как то проверки отсутствия в них противоречий, вывода новых знаний из уже имеющихся, обеспечения возможности делать запросы к базам знаний (по аналогии с запросами к базам данных). Благодаря тому, что базы знаний ДЛ записаны в формализованном виде, имеется возможность делать строгий логический вывод. А поскольку синтаксис и семантика ДЛ построены таким образом, что основные логические проблемы являются разрешимыми, то вывод новых знаний можно осуществлять компьютерными средствами — специальными программами (reasoners).
Пусть мы фиксировали некоторую ДЛ. Введем несколько важных понятий.

Говорят, что концепт 
  
    
      
        C
      
    
    {\displaystyle C}
   данной логики выполняется в интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
  , если 
  
    
      
        
          C
          
            
              I
            
          
        
        ≠
        ∅
      
    
    {\displaystyle C^{\mathcal {I}}\neq \varnothing }
  .
Концепт 
  
    
      
        C
      
    
    {\displaystyle C}
   называется выполнимым, если существует интерпретация, в которой он выполняется.
Концепт 
  
    
      
        C
      
    
    {\displaystyle C}
   вложен в концепт 
  
    
      
        D
      
    
    {\displaystyle D}
   (или содержится в нём; англ. «is subsumed by»), если в любой интерпретации 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   выполняется 
  
    
      
        
          C
          
            
              I
            
          
        
        ⊆
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle C^{\mathcal {I}}\subseteq D^{\mathcal {I}}}
  .Аналогичные понятия можно ввести относительно некоторого заданного TBox 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
  , ограничиваясь моделями данного TBox. Например, концепт 
  
    
      
        C
      
    
    {\displaystyle C}
   называется выполнимым относительно TBox 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
  , если существует интерпретация, являющаяся моделью этого TBox, в которой данный концепт выполняется.
Когда задан не только TBox 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
  , но и ABox 
  
    
      
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {A}}}
  , а значит имеется база знаний 
  
    
      
        
          
            K
          
        
        =
        
          
            T
          
        
        ∪
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {K}}={\mathcal {T}}\cup {\mathcal {A}}}
  , то возникает ещё одно понятие.

Индивид 
  
    
      
        a
      
    
    {\displaystyle a}
   является экземпляром концепта 
  
    
      
        C
      
    
    {\displaystyle C}
   относительно базы знаний 
  
    
      
        
          
            K
          
        
      
    
    {\displaystyle {\mathcal {K}}}
  , если в любой модели 
  
    
      
        
          
            I
          
        
      
    
    {\displaystyle {\mathcal {I}}}
   базы знаний 
  
    
      
        
          
            K
          
        
      
    
    {\displaystyle {\mathcal {K}}}
   имеет место 
  
    
      
        
          a
          
            
              I
            
          
        
        ∈
        
          C
          
            
              I
            
          
        
      
    
    {\displaystyle a^{\mathcal {I}}\in C^{\mathcal {I}}}
  .Следующие понятия формализуют ключевые алгоритмические проблемы, связанные с конкретной ДЛ:

Выполнимость концепта: является ли заданный концепт выполнимым относительно заданного TBox?
Вложенность концептов: верно ли, что один заданный концепт вложен в другой относительно заданного TBox?
Совместимость TBox: имеет ли заданный TBox хотя бы одну модель?
Совместимость базы знаний: имеет ли заданная пара (TBox, ABox) хотя бы одну модель?В логиках, содержащих 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  , проблема вложенности концептов сводится к выполнимости концепта. Важное практическое значение имеют нестандартные алгоритмические проблемы, в частности:

Классификация терминологии: для данной терминологии (то есть TBox) построить таксономию или иерархию концептов, то есть упорядочить все атомарные концепты по отношению вложения (отн. данного TBox) и выдать соответствующее частично упорядоченное множество.
Извлечение экземпляров концепта: найти все экземпляры заданного концепта относительно заданной базы знаний.
Наиболее узкий концепт для индивида: найти наименьший (по вложению) концепт, экземпляром которого является заданный индивид относительно заданной базы знаний.
Ответ на запрос к базе знаний: выдать все наборы индивидов, которые удовлетворяют заданному запросу относительно заданной базы знаний. В настоящее время глубоко изучены так называемые конъюнктивные запросы к базам знаний ДЛ (а также их дизъюнкции), которые похожи на аналогичные запросы из области баз данных. В случае же запросов более общего вида проблема быстро приобретает высокую вычислительную сложность или даже становится неразрешимой.

Свойства ДЛ
Фундаментальными характеристиками той или иной ДЛ являются следующие:

Разрешимость: обычно рассматривают разрешимость проблем выполнимости концепта (относительно TBox), совместимости базы знаний, ответа на конъюнктивные запросы.
Вычислительная сложность: изучается вычислительная сложность указанных выше алгоритмических проблем относительно размера входных данных (концепта, TBox, ABox). Отдельно выделяют сложность проблемы выполнимости концепта при фиксированном TBox, сложность проблемы выполнимости базы знаний или проблемы ответа на запросы при фиксированном TBox и меняющемся ABox (так называемая сложность по данным, англ. data complexity).
Свойство конечности моделей, или иначе полнота относительно конечных моделей: исследуется вопрос, всегда ли верно, что если концепт выполним (относительно TBox), то он выполним и на некоторой конечной модели (данного TBox). Из наличия данного свойства у конкретной ДЛ обычно следует, что для данной ДЛ более просто строится разрешающая процедура, например, табло-алгоритм.
Свойство древовидности моделей, или иначе полнота относительно древовидных моделей (англ. tree model property): аналогичный вопрос, но не о конечных, а о «древовидных» моделях. При этом древовидными здесь могут считаться структуры, слегка отличающиеся от традиционного понятия дерева; например, могут допускаться петли (ребра, ведущие из вершины в эту же вершину), мультирёбра (несколько ребер различных «типов», ведущих из одной вершины в другую), транзитивные деревья (структуры, являющиеся транзитивным замыканием обычных деревьев), а также их комбинации. У логик, обладающих данным свойством, обычно более низкая вычислительная сложность, в частности, более просто строится разрешающий табло-алгоритм.К настоящему времени получено большое количество результатов, касающихся этих свойств различных ДЛ. Подавляющее большинство их собрано в виде интерактивной веб-страницы: Навигатор по сложности дескрипционных логик (англ.), где кроме того имеются ссылки на первоисточники полученных результатов.

Связь с языком OWL
Язык веб-онтологий OWL разрабатывается как язык, на котором можно формулировать и публиковать в веб так называемые сетевые онтологии — формально записанные утверждения о понятиях и объектах некоторой предметной области. Одним из требований к таким онтологиям заключается в том, чтобы содержащиеся в них знания были «доступны» для машинной обработки, в частности, для автоматизированного логического вывода новых знаний из уже имеющихся. Для этого требуется, чтобы язык, на котором формулируются онтологии, имел точную семантику, а соответствующие логические проблемы были разрешимы (и имели практически допустимую вычислительную сложность). Кроме того, желательно, чтобы такой язык имел довольно большую выразительную силу, пригодную для формулировки на нём практически значимых фактов.
Дескрипционные логики обладают такими свойствами, и по этой причине они были выбраны в качестве логической основы для языка веб-онтологий OWL. Последний является языком, имеющим XML-формат, поэтому можно сказать, что OWL является переформулировкой некоторых ДЛ с использованием синтаксиса XML. Поскольку существует много ДЛ, различающихся как по выразительной силе, так и по вычислительной сложности, это привело к тому, что в языке OWL имеется несколько вариантов.
Соответствие терминов: имеющиеся в ДЛ понятия концепт, роль, индивид и база знаний в OWL соответствуют понятиям класс, свойство, объект и онтология, соответственно.
Официальной рекомендацией W3C от 10 февраля 2004 года является версия языка OWL 1.0. Данная спецификация языка OWL подразделяется на следующие варианты:

OWL-Lite — соответствует дескрипционной логике 
  
    
      
        
          
            S
            H
            I
            F
          
        
        (
        D
        )
      
    
    {\displaystyle {\mathcal {SHIF}}(D)}
  ;
OWL-DL — соответствует дескрипционной логике 
  
    
      
        
          
            S
            H
            O
            I
            N
          
        
        (
        D
        )
      
    
    {\displaystyle {\mathcal {SHOIN}}(D)}
  ;
OWL-Full — не соответствует какой-либо ДЛ, более того, является неразрешимым.Находящаяся в стадии рабочего черновика новая версия языка OWL 1.1 покрывает дескрипционную логику 
  
    
      
        s
        
          
            R
            O
            I
            Q
          
        
        (
        D
        )
      
    
    {\displaystyle s{\mathcal {ROIQ}}(D)}
  , включающую в себя логику 
  
    
      
        
          
            S
            H
            O
            I
            Q
          
        
        (
        D
        )
      
    
    {\displaystyle {\mathcal {SHOIQ}}(D)}
  , составные аксиомы вложенности ролей в TBox (буква 
  
    
      
        
          
            R
          
        
      
    
    {\displaystyle {\mathcal {R}}}
   в названии логики), а также аксиомы непересекаемости, рефлексивности, иррефлексивности и асимметричности ролей, универсальную роль (интерпретируемую как 
  
    
      
        
          Δ
          
            
              I
            
          
        
        ×
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}\times \Delta ^{\mathcal {I}}}
  ), конструктор концепта 
  
    
      
        ∃
        R
        .
        
          
            S
            e
            l
            f
          
        
      
    
    {\displaystyle \exists R.{\mathsf {Self}}}
   (интерпретируемый как множество элементов, являющихся 
  
    
      
        R
      
    
    {\displaystyle R}
  -последователем самих себя) и допускает утверждения 
  
    
      
        ¬
        R
        (
        a
        ,
        b
        )
      
    
    {\displaystyle \neg R(a,b)}
   в ABox.Одновременно с этим разрабатывается следующая версия языка OWL 2.0, которая, помимо перечисленного, даст возможность формулировать онтологии в языке, соответствующем дескрипционной логике 
  
    
      
        
          
            E
            L
          
        
      
    
    {\displaystyle {\mathcal {EL}}}
   (преимущество которой в том, что она имеет полиномиальную вычислительную сложность); привнесет синтаксические улучшения, позволяющие легче составлять запросы к базам знаний и выдавать ответы на них; а также будет содержать механизмы для формулировки правил логического вывода.

Машины вывода и редакторы
Имеется множество программных систем (машин вывода), позволяющих совершать логический анализ в дескрипционных логиках (проверять онтологию на непротиворечивость, строить таксономии, проверять выполнимость и вложенность концептов, делать запросы к базам знаний и др.). Подобные системы различаются по поддерживаемым ими дескрипционным логикам, по типу реализованной в них разрешающей процедуры (например, табло-алгоритм, резолюция и т. п.), по поддерживаемым форматам данных, языку программирования, на котором они реализованы, и другим параметрам. Среди наиболее известных можно перечислить системы:

CEL — поддерживает логику 
  
    
      
        
          
            E
            L
          
        
        +
      
    
    {\displaystyle {\mathcal {EL}}+}
  , имеющую полиномиальную сложность, написан на LISP;
FaCT++ — поддерживает логику 
  
    
      
        s
        
          
            R
            O
            I
            Q
          
        
        (
        D
        )
      
    
    {\displaystyle s{\mathcal {ROIQ}}(D)}
  , а также OWL 2.0, реализует табло-алгоритм, написан на C++;
KAON2 — поддерживает логику 
  
    
      
        
          
            S
            H
            I
            Q
          
        
      
    
    {\displaystyle {\mathcal {SHIQ}}}
  , расширенную специальными правилами вывода, реализует алгоритм, основанный на резолюции, написан на Java;
Pellet — поддерживает логику 
  
    
      
        s
        
          
            R
            O
            I
            Q
          
        
        (
        D
        )
      
    
    {\displaystyle s{\mathcal {ROIQ}}(D)}
  , а также OWL 1.1, реализует табло-алгоритм, написан на Java;
RacerPro — поддерживает логику 
  
    
      
        
          
            S
            H
            I
            Q
          
        
        (
        D
        )
      
    
    {\displaystyle {\mathcal {SHIQ}}(D)}
  , реализует табло-алгоритм, написан на LISP.Создан единый ресурс — список машин ДЛ-вывода, постоянно поддерживаемый в актуальном состоянии и описывающий основные аспекты этих и других программных систем, обеспечивающих логический вывод в ДЛ.
Существуют также редакторы онтологий, позволяющие создавать / редактировать онтологии, сохранять их в различных форматах, некоторые позволяют подключить блок рассуждений (англ. reasoner) и с его помощью произвести логический анализ онтологии. Одним из наиболее известных является редактор онтологий Protégé, позволяющий работать с онтологиями в языке OWL Full.

См. также
Дескрипция
Теория дескрипций
База знаний
Онтология
Язык OWL
Семантическая паутина

Примечания
Ссылки
Официальный сайт сообщества исследователей дескрипционных логик
Навигатор по вычислительной сложности дескрипционных логик
Список ДЛ reasoners

Литература
Рассел С., Норвиг П. Искусственный интеллект: современный подход. — М.: ИД «Вильямс», 2006. — 1408 с. — ISBN 5-8459-0887-6.
Franz Baader and Diego Calvanese and eborah L. McGuinness and Daniele Nardi and Peter F. Patel-Schneider. The Description Logic Handbook: Theory, Implementation, and Applications. — Cambridge University Press, 2003. — ISBN 0-521-78176-0.