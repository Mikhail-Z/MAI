Ассоциативный массив — абстрактный тип данных (интерфейс к хранилищу данных), позволяющий хранить пары вида «(ключ, значение)» и поддерживающий операции добавления пары, а также поиска и удаления пары по ключу:

INSERT(ключ, значение)
FIND(ключ)
REMOVE(ключ)Предполагается, что ассоциативный массив не может хранить две пары с одинаковыми ключами.
В паре 
  
    
      
        (
        k
        ,
        v
        )
      
    
    {\displaystyle (k,v)}
   значение 
  
    
      
        v
      
    
    {\displaystyle v}
   называется значением, ассоциированным с ключом 
  
    
      
        k
      
    
    {\displaystyle k}
  . Где 
  
    
      
        k
      
    
    {\displaystyle k}
   - это key, a 
  
    
      
        v
      
    
    {\displaystyle v}
   - value. Семантика и названия вышеупомянутых операций в разных реализациях ассоциативного массива могут отличаться.
Операция FIND(ключ) возвращает значение, ассоциированное с заданным ключом, или некоторый специальный объект UNDEF, означающий, что значения, ассоциированного с заданным ключом, нет. Две другие операции ничего не возвращают (за исключением, возможно, информации о том, успешно ли была выполнена данная операция).
Ассоциативный массив с точки зрения интерфейса удобно рассматривать как обычный массив, в котором в качестве индексов можно использовать не только целые числа, но и значения других типов — например, строки.
Поддержка ассоциативных массивов есть во многих интерпретируемых языках программирования высокого уровня, таких, как Perl, PHP, Python, Ruby, Tcl, JavaScript и др. Для языков, которые не имеют встроенных средств работы с ассоциативными массивами, существует множество реализаций в виде библиотек.

Примеры
Примером ассоциативного массива является телефонный справочник. Значением в данном случае является совокупность «Ф. И. О. + адрес», а ключом — номер телефона. Один номер телефона имеет одного владельца, но один человек может иметь несколько номеров.

Расширения ассоциативного массива
Указанные три операции часто дополняются другими. Наиболее популярные расширения включают следующие операции:

CLEAR — удалить все записи
EACH — «пробежаться» по всем хранимым парам
MIN — найти пару с минимальным значением ключа
MAX — найти пару с максимальным значением ключаВ последних двух случаях необходимо, чтобы на ключах была определена операция сравнения.

Реализации ассоциативного массива
Существует множество различных реализаций ассоциативного массива.
Самая простая реализация может быть основана на обычном массиве, элементами которого являются пары (ключ, значение). Для ускорения операции поиска можно упорядочить элементы этого массива по ключу и осуществлять нахождение методом бинарного поиска. Но это увеличит время выполнения операции добавления новой пары, так как необходимо будет «раздвигать» элементы массива, чтобы в образовавшуюся пустую ячейку поместить новую запись.
Наиболее популярны реализации, основанные на различных деревьях поиска. Так, например, в стандартной библиотеке STL языка С++ контейнер map реализован на основе красно-чёрного дерева.
В языках Ruby, Tcl, Python используется один из вариантов хеш-таблицы.
Есть и другие реализации.
У каждой реализации есть свои достоинства и недостатки. Важно, чтобы все три операции выполнялись как в среднем, так и в худшем случае за время 
  
    
      
        O
        (
        log
        ⁡
        n
        )
      
    
    {\displaystyle O(\log n)}
  , где 
  
    
      
        n
      
    
    {\displaystyle n}
   — текущее количество хранимых пар. Для сбалансированных деревьев поиска (в том числе для красно-чёрных деревьев) это условие выполнено.
В реализациях, основанных на хеш-таблицах, среднее время оценивается как 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  , что лучше, чем в реализациях, основанных на деревьях поиска. Но при этом не гарантируется высокая скорость выполнения отдельной операции: время операции INSERT в худшем случае оценивается как 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  . Операция INSERT выполняется долго, когда коэффициент заполнения становится высоким и необходимо перестроить индекс хеш-таблицы.
Хеш-таблицы плохи также тем, что на их основе нельзя реализовать быстро работающие дополнительные операции MIN, MAX и алгоритм обхода всех хранимых пар в порядке возрастания или убывания ключей.

Поддержка ассоциативных массивов в языках программирования
Библиотека STL языка C++
Здесь приведено простейшее консольное приложение, предоставляющее интерфейс телефонной книжки. Оно реализовано на основе контейнера map.

C#
В C# для организации ассоциативного массива используется тип Dictionary:

Для перебора элементов можно использовать цикл foreach. Порядок элементов не гарантируется. Если порядок важен, можно использовать SortedDictionary либо использовать метод-расширение Sort из LINQ.

Java
В языке Java ассоциативный массив именуется отображением (map) и имеет соответствующий интерфейс в стандартном Java API: java.util.Map
Стандартный Java SDK включает в себя ряд реализаций этого интерфейса: HashMap, LinkedHashMap, ConcurrentHashMap, EnumMap, TreeMap и другие.

Перебор элементов коллекции:

Kotlin
В отличие от многих языков, в Kotlin существуют неизменяемые и изменяемые ассоциативные массивы: Map<K, out V> и MutableMap<K, V>. Это относится к любым коллекциям - спискам, множествам и т.д.. Создание ассоциативного массива осуществляется с помощью идиомы mapOf(a to b, c to d).

Перебор элементов коллекции:

Ruby
Класс Hash из стандартной библиотеки Ruby поддерживает операции [] (find), []= (insert), delete,
each, keys, values, а также множество других.
Ниже приведён код с примерами выполнения отдельных операций.

Ниже приведён код с реализацией консольного приложения «телефонная книжка».

Python
Встроенный в Python тип ассоциативного массива называется словарём, элементами которого являются пары ключей и соответствующих им значений.

Здесь были показаны два способа написания литерала словаря и продемонстрировано, что ключом может быть объект любого неизменяемого (в нотации python) типа. Добавление нового объекта в словарь не требует предварительных проверок: если ранее ключу уже соответствовало некоторое значение, оно будет перезаписано (Подробнее см. Python Tutorial, Dictionaries (англ.)). Другие операции со словарем:

На Python весьма просто можно написать свой класс, который будет вести себя подобно словарю. Для этого необходимо лишь определить в своем классе соответствующие методы (см. Python Reference Manual, Emulating container types (англ.)).
Расширить свойства встроенного типа словаря (dict) можно путём наследования класса, см. пример.

Perl
Ассоциативный массив (в Perl принято называть его хешем — англ. hash) является встроенным типом данных. Хеш можно создавать поэлементно либо целиком, присвоив ему значения списка, в котором элементы записаны в виде пар «ключ — значение», внутри пары элементы могут разделяться как традиционным путём (например, запятой), так и при помощи оператора =>:

Delphi
Delphi до 2007 версии не имело прямых средств работы с ассоциативными массивами. Однако вы можете имитировать ассоциативные массивы, используя различного рода списковые классы для этого: TBucketList, TObjectBucketList, THashedStringList, TStringList (как и все другие потомки TStrings, а также Memo, ListBox и др.). Например:

PL/SQL
СУБД Oracle начиная с версии 9.2.0 позволяет использовать в качестве ключей, помимо binary_integer и pls_integer, также и строки varchar2 с длиной до 32767:

PHP
PureBasic
В PureBasic, начиная с версии 4.40, появилась встроенная поддержка ассоциативных массивов. Его называют отображением (map). Пример обычного ассоциативного массива:

Пример структурированного (каждым элементом является структура данных) ассоциативного массива.

JavaScript
В ECMAScript 6 есть специальный объект Map, но он не везде поддерживается. Обычные массивы могут иметь только числовые индексы, потому для эмуляции ассоциативных массивов, ключами которых могут быть в том числе и строковые значения, можно использовать объекты.
Конструкция вида myVar = { key1: value1, key2: value2, … } создает объект myVar с набором полей, каждое из которых имеет свой ключ и значение. В дальнейшем доступ к элементам этого объекта может выполняться как с использованием нотации объектов и полей (myVar.key1), так и в нотации массивов и ключей (myvar['key1']).

Go
В компилируемом языке программирования Go ассоциативные массивы названы отображениями (map) и их поддержка, в отличие от языков C и C++, встроена в язык, то есть не требует подключения каких-либо модулей (package).

Rust
В Rust ассоциированные массивы реализуются через коллекцию HashMap, входящую в стандартную библиотеку языка:

См. также
Индексный массив
Хеш-таблица
Сбалансированное дерево поиска
Красно-чёрное дерево

Ссылки
Классы или модули, реализующие ассоциативный массив или его расширение в различных языках программирования:

Контейнер map в STLстраница помощи std::map на MSDN
страница помощи std::map на SGI STL
страница помощи std::hashmap SGI STLКласс Hash в Ruby
Модуль Array в Tcl
Класс Dict в Python
Класс TreeDictionary в C#
Интерфейс Map в Java
NIST’s Dictionary of Algorithms and Data Structures: Associative Array
NIST’s Dictionary of Algorithms and Data Structures: Association List
Массивы в PHP — Индексные, ассоциативные и многомерные массивы


== Примечания ==