Дружелюбный русский алгоритмический язык, который обеспечивает наглядность (сокр. ДРАКОН) — визуальный алгоритмический язык программирования и моделирования (см. также: UML).
Язык построен за счёт формализации и эргономизации блок-схем алгоритмов, описанных в ГОСТ 19.701-90 и ISO 5807-85.
Язык может быть использован для разработки программ реального времени.
Правила языка ДРАКОН по созданию диаграмм разрабатывались с учётом требований эргономики, то есть изначально оптимизированы для восприятия алгоритмов человеком с использованием технологий компьютерной графики. При этом, данный язык рассчитан на создание программ, которые можно было бы просматривать как модели, содержащие код на текстовом языке.
Возможности языка ДРАКОН могут расширяться в зависимости от нужд пользователя: на языке ДРАКОН можно писать программы для ЭВМ за счет включения в себя функционала и синтаксиса поддерживаемого ИС ДРАКОН или DRAKON Editor текстового языка программирования; при этом программа для ЭВМ, написанная таким образом, считается написанной на гибридном языке ДРАКОН-[название языка].
Вышеописанный подход повышает эргономику, особенно в ситуации, когда программа пишется продолжительное время и/или коллективно (например, с поддерживается с помощью GIT), создавая обстановку, позволяющую писать программу, имея в процессе её написания её же модель, которая облегчает возможность ориентироваться внутри исходного кода.
Программа, считающаяся написанной на «чистом» языке ДРАКОН, является моделью поведения.

Хронология развития языка
ДРАКОН Разрабатывался с 1986 года как часть космической программы «Буран», разработка при участии Федерального космического агентства (Научно-производственный центр автоматики и приборостроения им. акад. Н. А. Пилюгина, Москва) и Российской академии наук (Институт прикладной математики им. М. В. Келдыша).
Работы по разработке языка были закончены в 1996 году (уже спустя 3 года после закрытия программы «Буран»), когда была создана автоматизированная система проектирования программных систем (CASE-технология) ГРАФИТ-ФЛОКС . Эта технология эксплуатируется в некоторых крупных космических программах: международный проект «Морской старт», разгонный блок космических аппаратов «Фрегат», модернизированная ракета-носитель тяжёлого класса «Протон-М» и др..

Во время работы над «Бураном» был придуман язык технических символов — ДРАКОН: «Дружелюбный русский алгоритмический, который обеспечивает наглядность». Он и стал своеобразным инструментом взаимопонимания в пилюгинском коллективе инженеров и конструкторов. Разработки академика Пилюгина и сегодня применяются в современной ракетной технике. Тяжелые «Протоны» уходят в небо с его системой управления, а грозные ракетные комплексы «Тополь-М» обеспечивают оборону страны.

В результате ДРАКОН превратился в семейство языков моделирования:

Программа «ИС Дракон» поддерживает гибридные языки программирования Дракон-С, Дракон-Delphi, Дракон-1С, Дракон-ASM.
ДРАКОН-редактор обеспечивает работу с гибридными языками Дракон-Java, Дракон-C#, Дракон-C, Дракон-Python, Дракон-Tcl, Дракон-Javascript, Дракон-Lua, Дракон-Erlang, Дракон-Verilog.

История создания
Разработка языков программирования для космического корабля «Буран»
Система управления орбитального корабля «Буран» управляет полетом Бурана и всеми бортовыми системами корабля. Система управления создана в Научно-производственном центре автоматики и приборостроения имени академика Н. А. Пилюгина (далее — Пилюгинский центр). Головным мозгом Бурана служит Бортовой вычислительный комплекс. Основным разработчиком бортового и наземного программного обеспечения системы управления Бурана является Пилюгинский центр.
При создании программ для сложных космических объектов возникают проблемы, требующие создания языков программирования высокого уровня, предназначенных для решения задач реального времени для систем управления ракетно-космической техники. Именно такие проблемы инициировали появление языка ДРАКОН. При разработке Бурана проблема разработки и отработки программного обеспечения считалась одной из наиболее сложных. Первоначально предполагалось, что для решения задачи потребуется несколько тысяч программистов. Следует учесть, что программисты Пилюгинского центра привыкли писать программы преимущественно на ассемблере, чтобы экономить объём требуемой памяти, так как объём памяти бортового компьютера «Бисер-4» был очень ограниченным.
В материалах Института прикладной математики им. М. В. Келдыша РАН о событиях того периода говорится:

В 1983 году разработчики космического корабля Буран обратились в Институт прикладной математики с просьбой помочь в разработке бортового программного обеспечения и программного обеспечения наземных испытаний корабля. По их оценкам, для этой работы требовалось несколько тысяч программистов. После изучения задачи было решено разработать проблемно-ориентированные языки, основанные на терминах, понятиях и форме представления алгоритмов управления и испытаний, используемых разработчиками корабля…
Разработка языков и соответствующих инструментальных средств была выполнена небольшим коллективом высококвалифицированных программистов Института прикладной математики РАН в чрезвычайно сжатые сроки. Для разработки бортового программного обеспечения был создан специализированный язык реального времени ПРОЛ2 и базирующаяся на нём система автоматизации программирования и отладки САПО ПРОЛ2… Для разработки программного обеспечения наземных испытаний корабля был создан проблемно-ориентированный язык ДИПОЛЬ и базирующаяся на нём система автоматизации программирования и отладки.

Тогда, чтобы решить проблему нехватки программистов при создании Бурана и повысить производительность и качество труда при разработке алгоритмов и программ, Институт прикладной математики РАН по просьбе Пилюгинского центра создал два русскоязычных языка:

язык реального времени ПРОЛ2 для разработки бортовых комплексных программ (руководитель авторского коллектива Виктор Крюков);
проблемно-ориентированный язык для разработки программ наземных испытаний ДИПОЛЬ (руководитель Владимир Луцикович).Кроме того, в Пилюгинском центре под руководством Константина Федорова был создан язык ЛАКС для моделирования. Таким образом, появились три новых языка, которые были непосредственными предшественниками ДРАКОНА. Опыт их эксплуатации был тщательно изучен и использован при создании языка ДРАКОН.

Идеи и требования, заложенные в ДРАКОН
Хотя языки ПРОЛ2, ДИПОЛЬ и ЛАКС успешно решали поставленные им задачи, стало ясно, что узкая специализация языков мешает делу. Данную мысль в 1986 году высказал начальник комплексного отделения Юрий Трунов (впоследствии Генеральный конструктор Пилюгинского центра).
Трунов предложил создать универсальный язык, способный собой заменить три вышеназванных языка.
Было решено, что новый язык должен не только удовлетворять практическим нуждам космической техники, но и решать широкий круг задач, выходящих далеко за рамки традиционного программирования: причиной для разработки ДРАКОН был человеческий фактор.
В связи с этим при создании языка ДРАКОН были выдвинуты необычные для программистов и математиков требования гуманитарного характера:

предложить эффективные средства для описания не только алгоритмов, но и структуры человеческой деятельности в любой отрасли знаний (включая бизнес-процессы);
предоставить человеку такие языковые средства, которые безальтернативно заставляют человека мыслить отчетливо, глубоко и продуктивно, а потому значительно упрощают восприятие сложных процедурных проблем и общение с коллегами. В этих условиях вероятность заблуждений, просчетов и ошибок падает, а производительность растет;
облегчить межотраслевое и междисциплинарное общение между представителями разных организаций, ведомств, отделов, лабораторий, научных школ и профессий;
устранить или уменьшить барьеры взаимного непонимания между работниками различных специальностей (врачами и физиками, математиками и конструкторами, биологами и экономистами и т. д.), а также программистами и теми, кто не владеет программированием;
за счет использования когнитивно-эргономического подхода к проектированию (синтаксиса и семантики) языка добиться значительного улучшения качества программного обеспечения по критерию «понятность алгоритмов и программ».

Разработка и использование языка ДРАКОН и его инструментальных средств для ракет-носителей и разгонных блоков космических аппаратов
Разработка языка ДРАКОН и системы программирования началась в 1986 году. Через 11 лет на базе ДРАКОНа была построена автоматизированная Технология разработки алгоритмов и программ (CASE-технология) под названием «ГРАФИТ-ФЛОКС».
Затем язык ДРАКОН и система ГРАФИТ-ФЛОКС поступили в эксплуатацию. С их помощью были разработаны многие алгоритмы и программы разгонного блока космических аппаратов ДМ-SL Международного проекта «Морской старт». В общей сложности на разработку и отработку программного обеспечения и других элементов системы управления ушло три года. К 1999 году все работы были закончены. Система была готова к старту.
Первый пуск ракетного комплекса «Морской старт» состоялся 28 марта 1999 года. Он произошёл в 5 часов 30 минут по московскому времени (27 марта 1999 г. в 18 часов 30 минут по тихоокеанскому времени) со стартовой платформы «Одиссей» в Тихом океане в районе островов Кирибати. Этот пуск был ответственным испытанием языка ДРАКОН и технологии «ГРАФИТ-ФЛОКС». Он продемонстрировал их эффективность и надежность. С тех пор по программе «Морской старт» проведено свыше 30 ракетных пусков.
Язык ДРАКОН используется и в других космических программах, например: разгонный блок космических аппаратов «Фрегат»; модернизированная ракета-носитель тяжелого класса «Протон-М»; разгонный блок космических аппаратов ДМ-SLБ (проект «Наземный старт»); разгонный блок космических аппаратов ДМ-03; первая ступень южнокорейской ракеты-носителя легкого класса KSLV-1 (Korean Space Launch Vehicle #1); ракета-носитель легкого класса Ангара 1.2; ракета-носитель тяжелого класса Ангара-А5 и др.Поскольку результаты использования ДРАКОНа были стабильно высокими, руководство Пилюгинского центра приняло решение об использовании ДРАКОН-технологии в последующих проектах.

Разработка инструментальных средств языка ДРАКОН для широкого применения
Распространение языка ДРАКОН можно разделить на два этапа.
На начальном этапе информация о ДРАКОНе была недоступна для пользователей, так как работы по ракетно-космическим программам и, в частности, по космической программе Буран были строго засекречены как составляющие государственную тайну. В тот период область применения ДРАКОНа была ограничена ракетно-космической техникой. Язык применялся и применяется в Пилюгинском центре при разработке программ для бортового компьютера «Бисер», установленного на борту ракет-носителей и разгонных блоков космических аппаратов.
На втором этапе, в результате политики гласности, свободы слова, снятия неоправданных ограничений на распространение информации и рассекречивания ранее закрытых сведений и проектов появилась возможность приспособить инструментальные средства языка ДРАКОН для гражданских нужд широкого применения, то есть создать их в несекретном варианте для эксплуатации на персональных компьютерах и др. Сфера применения языка стала постепенно расширяться. Началось использование дракон-схем за рамками ракетно-космической техники (недоступная ссылка с 04-06-2016 [1074 дня]) — для решения задач в различных предметных областях и отраслях экономики.
Этому способствовал ряд обстоятельств. В открытой литературе стали доступны публикации по языку ДРАКОН. Часть этих материалов появилась в Интернете в конце 2006 года.
Геннадий Тышов разработал программу «ИС Дракон» (для ОС Windows). Степан Митькин (Норвегия), по своей инициативе (независимо от Пилюгинского центра), разработал программу «DRAKON Editor» (для ОС Windows, Mac, Linux). Программы выложены для свободного скачивания. Пользователи программ получили возможность формировать и использовать визуальные алгоритмы.

Аналоги ДРАКОНа и его составных частей
Близким аналогом семейства языков ДРАКОН является «R-технология производства программ, или технология двумерного программирования», созданная в Институте кибернетики имени В. М. Глушкова, причём графика дракон-схем в ДРАКОН-семействе служит аналогом графики Р-схем в R-технологии. В технологическом комплексе программиста RТК принцип обработки информации в компьютере подразумевает деление на R-машину, R-язык и R-технологию. ДРАКОН использует тот же принцип, выраженный с помощью другого понятийного аппарата.
Аналогом дракон-схем (как алгоритмического языка моделирования) являются диаграммы поведения языка UML: диаграмма деятельности (activity diagram), диаграмма состояний (UML state machine) и некоторые диаграммы взаимодействия, например, диаграмма синхронизации (timing diagram).
Более фундаментальными аналогами дракон-схем являются собственно блок-схема, диаграмма Насси-Шнейдермана, псевдокод (язык описания алгоритмов) и др.

Следует отметить: в отличие от блок-схем, дракон-схемы имеют средства для описания работы в реальном времени.

Философия языка (понятность алгоритмов и программ)
Основной задачей разработчиков было создание единого универсального языка программирования и моделирования, который своей доступностью и мощностью способен заменить специализированные языки (как-то ПРОЛ2 (для разработки бортовых комплексных программ Бурана), ДИПОЛЬ (для создания наземных программ Бурана) и ЛАКС (для моделирования)).
На втором этапе разработки была предложена концепция гибридных языков программирования. В рамках этой концепции созданы инструментальные средства языка ДРАКОН для гражданских нужд широкого применения в несекретном варианте. Так появилась интегрированная среда разработки алгоритмов и программ под названием «ИС Дракон».

Понятность алгоритмов и программ
Схемы и алгоритмы, разработанные с помощью этого языка, просты и понятны любому человеку, далекому от программирования. По мнению доктора технических наук О. Г. Григорьева, доктора технических наук Г. Д. Волковой и других специалистов,

Основными достоинствами языка ДРАКОН являются: универсальность языка, пригодность для решения широкого круга разноплановых интеллектуальных задач; сочетание строгой логико-математической формализации с точным учетом когнитивных (познавательных) характеристик человека; пригодность дракон-схем для автоматического получения программного кода; наглядность и регулярность структуры представления описываемых процессов; простота в освоении и применении; легкость понимания представления решения. К недостаткам языка относятся: малая известность языка среди разработчиков автоматизированных систем; сложность интеграции схем и т. д..
По мнению некоторых специалистов, основными критериями качества программы являются понимаемость (читаемость), сопровождаемость и надёжность (корректность). Эффективным средством для улучшения понимаемость алгоритмов является визуализация программирования.
Основным требованием к визуальному языку ДРАКОН является упрощение визуального восприятия алгоритмов.

Философия «программирование без программистов». Особенности подхода.
ДРАКОН — легкий язык. Настолько легкий, что разработку многих компьютерных программ для космических ракет на практике ведут не программисты, а инженеры — по принципу «программирование без программистов». Причина частичного отказа от программистов проста. При решении практических прикладных задач инженеры досконально владеют материалом и прекрасно знают постановку задачи. В отличие от них программисты не знают физику процесса и становятся «лишними людьми», без которых в ряде случаев (хотя и не всегда) вполне можно обойтись.
По мнению специалистов, благодаря использованию дракон-схем алгоритмы и программы становятся более понятными, доходчивыми, ясными, прозрачными.
Иными словами, за счёт упора на визуальную составляющую, ДРАКОН резко снижает порог требований к программисту и упрощает чтение программы. Это происходит за счёт того, что структура программы описана блок-схемой (если быть точным, то дракон-схемой, она же на английском drakon-chart вместо flowchart), в то время как на письменном языке расписано наполнение программы.
В итоге трудные для быстрого распознавания и понимания элементы языка (как-то операторы, вводимые и читаемые в виде текстовых символов на каком-либо языке речи), являющиеся «бутылочными горлышками» как для обучения языку, так и для общего понимания сути имеющейся программы, заменяются на интуитивно понятные схемы, на которых наглядно показан маршрут, который должна «пройти» программа.
Вследствие этого работники быстро овладевают дракон-схемами и успешно создают алгоритмы и прикладные программы без программистов или с их минимальным участиемОписанным выше способом предполагалось реализовать язык программирования, который бы работник умственного труда (в частности проектировщик, инженер аэрокосмической промышленности), мог бы использовать, чтобы лично создавать программу, не тратя большое время на овладение искусством программирования (и не рискуя спрятать ошибку во всём дорогостоящем проекте, допустив критическую неточность в техзадании, порученному специально приглашённому программисту). Более того, подобный подход может способствовать привитию культуры программирования, которая поощряет использование готовых стандартизированных наработок в виде готовых элементов программ (code snippets), имеющих подходящую лицензию.

Облегчение чтения программы, скорее всего, происходит за счёт того, что при чтении ДРАКОН-схемы мозг читателя автоматически производит разделение труда, а именно, делегирует распознавание «узора» (то есть собственно схемы программы) зрительному отделу мозга, уменьшая объём работы для анализа текстовой информации. Вышеуказанный способ, предположительно, позволяет расширить ограничения «кошелька Миллера» за счёт, по сути, использования двух отдельных «кошельков» памяти одновременно. Альтернативное мнение: узор участка программы ДРАКОН отражается в памяти как отдельная единица, занимая в «кошельке Миллера» кратковременной памяти меньше объёма.

Критика
Критика визуального программирования, связанная с ДРАКОНом в первую очередь, состоит в том, что при небрежности программирования или крайней неудачности алгоритма или сочетании обеих проблем можно столкнуться с резким падением удобства/скорости чтения программы. При разработке ДРАКОН для борьбы с подобными ситуациями был выработан специальный стиль составления дракон-схем, включающий в себя приёмы повышения читаемости выведенной на экран или бумагу программы (см. ниже)
Особая критика «чистого» ДРАКОН-программирования состоит в следующем: ДРАКОН, в отличие от таких языков визуального программирования, как упомянутых в данной статье P-схем, изначально, по своей философии, создан таким, что программирование на нём тождественно составлению блок-схем по специальным правилам (см. раздел Нотация для моделирования потоков работ); в данном случае таким, которые бы облегчали чтение программы. Поэтому, для расширения функциональности конечной программы ДРАКОН позволяет пользоваться участками кода на текстовом языке внутри тела программы, внутри дракон-схемы, как правило, только одном и заранее известном. Сочетание ДРАКОНа с текстовым языком зовётся гибридным языком и несёт название вроде ДРАКОН-C++, ДРАКОН-Pascal, ДРАКОН-Delphi, где текстовый язык в названии упоминается после дефиса, а название визуального — до.
Подобная квазипарадигма (или правило/пожелание всем участникам проекта) существует в мире Linux/GNU, где большое количество внимания уделено отдельным программам, каждая из которых делает только одну функцию, но при том уделяется внимание к тому, чтобы программа выполняла эту функцию максимально хорошо.Вкратце, ДРАКОН подвергается критике по следующей причине: язык, говоря на сленге программистов, изначально задуман быть настолько синтаксически сладок, насколько это достижимо для визуального языка; при этом возможность имплементации дополнительных функций и повышения мощности языка возлагаются на «поглощаемый» ДРАКОНом (используемый в конечном гибридном языке) текстовый язык программирования.

Целевые аудитории языка
Язык ДРАКОН выполняет две принципиально разные функции.

Для лиц, не являющихся программистами, язык создан быть средством повышения эффективности интеллектуального труда при описании процессов и разработке алгоритмов, а именно, с помощью дракон-схем, заполненных текстом на профессиональном языке специалистов-непрограммистов (например, медиков, чему посвящён отдельный раздел).В этом качестве ДРАКОН не имеет отношения к программированию: он позволяет создавать наглядную и безальтернативно читаемую схему какого-либо алгоритма чего-либо. В этом качестве ДРАКОН хорош тем, что при использовании цветового выделения нужных элементов дракон-схемы он легче позволяет придать алгоритму акцентирование внимания на определённых участках алгоритма.Вторая функция состоит в том, что для программистов ДРАКОН служит языком программирования, имеющим свои инструменты для взаимодействия с компьютерами, а также другими языками программирования (как-то компиляция из ДРАКОН в TCL, С, С++ и др.: на сайте drakon.su имеется описание сочетания языка ДРАКОН с другими языками программирования).Таким образом, ДРАКОН одновременно обращен к двум совершенно разным аудиториям, чтобы выявить и учесть потребности каждой аудитории и по возможности удовлетворить их наилучшим образом. В этом состоит одно из ключевых преимуществ, поскольку ДРАКОН можно использовать как язык взаимопонимания между непрограммистами и программистами, между не программирующим большинством специалистов и программирующим меньшинством.

Особенности языка: Двумерное структурное программирование
Императивная (процедурная) часть языка ДРАКОН опирается на новую парадигму программирования — двумерное (графическое) структурное программирование. Идеи классического структурного программирования разрабатывались, когда компьютерная графика фактически ещё не существовала и основным инструментом алгоритмиста и программиста был одномерный (линейный или ступенчатый) текст.
Правила двумерного структурного программирования существенно отличаются от классического одномерного (текстового) структурного программирования. До появления компьютерной графики методология классического структурного программирования была наилучшим решением.

Первый шаг: Р-технология программирования
Первый шаг по направлению к двумерному структурному программированию был сделан в СССР в рамках Р-технологии производства программ, или «технологии двумерного программирования», созданной в Институте кибернетики имени В. М. Глушкова в 1970 годах. Автор Р-технологии программирования доктор физико-математических наук профессор Игорь Вельбицкий предложил пересмотреть понятие «структура программы». По его мнению, «структура — понятие многомерное. Поэтому отображение этого понятия с помощью линейных текстов (последовательности операторов) сводит практически на нет преимущества структурного подхода. Огромные ассоциативные возможности зрительного аппарата и аппарата мышления человека используются практически вхолостую — для распознавания структурных образов в виде единообразной последовательности символов».
Графическая система Р-технологии программирования закреплена в стандартах ГОСТ 19.005-85, ГОСТ Р ИСО/МЭК 8631—94 и международном стандарте ISО 8631Н.

Причины создания языка ДРАКОН
С появлением компьютерной графики ситуация изменилась. Используя выразительные средства графики, появилась возможность видоизменить, развить и дополнить три базовые (текстовые) управляющие конструкции (последовательность, ветвление, цикл), а также полностью отказаться от ключевых слов if, then, else, case, switch, break, while, do, repeat, until, for, foreach, continue, loop, exit, when, last и т. д. и заменить их на управляющую графику, то есть использовать двумерное структурное программирование.
По мнению разработчиков языка ДРАКОН, чтобы добиться улучшения, надо перейти от одномерного (классического) структурного программирования к двумерному (графическому) структурному программированию: многие ограничения и запреты, неизбежные при текстовом структурном программировании, во многих случаях противоречат здравому смыслу, затрудняют понимание алгоритмов и программ, искажают нормальный ход человеческой мысли.
Недопустимо запрещать правильный процесс мышления. Его надо разрешить. Шампур-метод и язык ДРАКОН устраняют этот недостаток.
При использовании шампур-метода набор управляющих ключевых слов (идентификаторов) текстового структурного программирования становится ненужным. При визуальном структурном подходе программист работает только с чертежом программы (дракон-схемой), не обращаясь к её текстовому представлению. Точно так же программист, работающий, например, на Дельфи, не обращается к ассемблеру и машинному коду — они для него просто не существуют. Во многих случаях (список которых ещё предстоит уточнить) желательно отказаться от текстовых управляющих структур, заменив их управляющей графикой.
Фактически, ДРАКОН — это не просто новый язык (новое семейство языков), а новый взгляд на императивное (процедурное) программирование и новое мировоззрение. Наибольшую трудность в течение длительного времени представляли математика и эргономика блок-схем. Нужно было создать математически строгий метод формализации блок-схем, позволяющий превратить блок-схемы в программу, пригодную для ввода в компьютер и трансляции в объектный модуль программы. При создании языка ДРАКОН эта задача была решена с помощью визуального логического исчисления (исчисления икон), которое лежит в основе графического синтаксиса языка ДРАКОН; метода Ашкрофта-Манны, который является математическим обоснованием дракон-схемы «силуэт»; двумерного структурного программирования. Одновременно была решена задача эргономизации блок-схем, то есть задача приспособления блок-схем для наиболее удобного человеческого восприятия и понимания.

Графический и текстовый синтаксис языка ДРАКОН
ДРАКОН — графический (визуальный) язык, в котором используются два типа элементов:

графические фигуры (icons, они же иконы, они же представленные в виде окружающих текстовые части программы (см. также: Картуш) геометрических фигур операторы языка);
текстовые надписи, расположенные внутри или снаружи икон (текстоэлементы).Поэтому язык ДРАКОН имеет не один, а два синтаксиса: графический и текстовый. Графический (визуальный) синтаксис охватывает алфавит икон, правила их размещения в поле чертежа и правила связи икон с помощью соединительных линий. Текстовый синтаксис задает алфавит символов, правила их комбинирования и привязку к иконам (привязка необходима потому, что внутри разных икон используются разные типы выражений).

Нотация для моделирования потоков работ
По мнению доктора технических наук профессора Александра Потий и др., использование дракон-схем в качестве нотации для моделирования потоков работ (workflows) позволяет избежать недостатков, присущих традиционным нотациям описания процесса, например, IDEF3. Основой дракон-схемы является чертеж, предназначенный быть простым и понятным, который обеспечивает более высокую продуктивность мозга за счет «симультанизации» зрительного восприятия чертежа.
Симультанизация означает увеличение скорости работы мозга при переходе от сукцессивного восприятия текста (медленный прием детальной информации с помощью центрального зрения (central vision)) к быстрому симультанному восприятию чертежа (быстрый панорамный прием обзорной информации с помощью периферийного зрения (peripheral vision)), то есть восприятию имеющейся структуры программы той же структурой мозга, которая распознаёт фигуры и узоры. Благодаря использованию специальных формальных и неформальных когнитивных приемов нотация drakon-chart дает возможность изобразить любой, даже очень сложный процесс в ясной и доходчивой форме. Такая форма позволяет значительно сократить интеллектуальные усилия эксперта, необходимые для зрительного восприятия, понимания, верификации и безошибочного принятия решения относительно степени соответствия характеристик процесса заданным требованиям. Иными словами, блок-схемы, выполненные по инструкциям к ДРАКОНу, используют приёмы графического дизайна как готовый способ облегчения восприятия информации, содержащейся в программе, а именно, позволяет охватить всю структуру программы, прилагая малое количество внимания (не предъявляя требований к en:Attention span имеющего дело с программой человека и не занимая его внимание долгое время).
При этом облегчается понимание описываемых процессов и обеспечивается их однозначное толкование различными экспертами, что способствует обеспечению выполнения требования повторяемости к результатам оценки.

Гибридизация ДРАКОН с другими языками программирования
ДРАКОН — не один язык, а целое семейство, которое может включать теоретически неограниченное число ДРАКОН-языков, на практике имеющее большое количество таковых. Все языки ДРАКОН-семейства имеют одинаковый графический синтаксис, что обеспечивает зрительное сходство дракон-схем различных ДРАКОН-языков, визуально отделяя код на ДРАКОНе и не на нём. Каждый язык семейства отличается тем, что имеет свой собственный текстовый синтаксис (то есть, использует синтаксис совместимого текстового языка программирования).
Строгое разграничение графического и текстового синтаксиса позволяет в максимальной степени расширить сферу применения языков семейства, обеспечивая гибкость и универсальность выразительных средств языка: текстовые скрипты, уже созданные на совместимом текстовом языке программирования не зависят от действий, совершаемых программированием на визуальном ДРАКОНЕ. При этом единообразие правил графического синтаксиса семейства ДРАКОН-языков обеспечивает их концептуальное единство. Разнообразие текстовых правил (то есть возможность выбора любого текстового синтаксиса), в свою очередь, определяет гибкость языка и лёгкую настройку на различные предметные и иные области.
В состав семейства входит универсальный визуальный алгоритмический язык, являющийся развитием блок-схем и представляющий собой язык моделирования, а не программирования, а также гибридные языки программирования.

Гибридные языки ДРАКОН-семейства
Императивную (процедурную) часть языка Дракон можно присоединить к некоторым языкам программирования и получить так называемые гибридные языки:

язык Дракон + язык Си = гибридный язык Дракон-Си
язык Дракон + язык Java = гибридный язык Дракон-JavaТочно так же можно построить языки Дракон-C#, Дракон-Python, Дракон-Tcl, Дракон-Erlang и другие. При создании гибридного языка Дракон-Си необходимо, в частности, создать транслятор из дракон-схемы в исходный код языка Си. В этом случае Си является целевым языком.
При использовании гибридных языков исходным текстом программы считается дракон-схема и только она. При отладке программы не следует вносить исправления в промежуточные файлы на целевых языках, например, в Си-файлы; все исправления нужно вносить в исходный код, то есть в дракон-схему.
Далее в качестве примера представлен порядок работы при разработке программы на гибридном языке Дракон-Си с помощью инструментальной программы ИС Дракон. Сначала в графической среде ИС Дракон разрабатывается на языке дракон-схем алгоритм, а затем программа. После этого инструментальная программа ИС Дракон транслирует полученный код дракон-схемы в исходный код языка Си. В заключение производится запуск компилятора языка Си, который осуществляет стандартную компиляцию в объектный код.
Описанный порядок работ используется, когда объём программы сравнительно небольшой. Если же программа большая (что имеет место при разработке программного обеспечения для системы управления ракет-носителей или разгонных блоков космических аппаратов), используется Технология разработки алгоритмов и программ ГРАФИТ-ФЛОКС.

Понятность дракон-схем
Как и все прочие языки, ДРАКОН опирается на математику и логику. Однако кроме того, он учитывает когнитивные вопросы.
Благодаря использованию формальных и неформальных когнитивных приемов дракон-схемы позволяют изобразить решение любой, сколь угодно сложной процедурной проблемы в предельно ясной, наглядной и доходчивой форме. Это даёт возможность значительно сократить интеллектуальные усилия персонала, необходимые для зрительного восприятия, понимания, верификации и безошибочного решения проблем. А также улучшить понимаемость алгоритмов и программ читающим их человеком. В основе языка ДРАКОН лежит идея когнитивной формализации знаний, позволяющая сочетать строгость логико-математической формализации с точным учетом когнитивных (познавательных) характеристик человека.
С точки зрения человеческого фактора, исторический процесс развития языков программирования сопровождается улучшением понятности алгоритмов и программ, повышением производительности труда программистов. На первом этапе произошёл переход от машинных кодов к автокодам и ассемблерам. Затем появились языки высокого уровня, которые (по сравнению с ассемблером) сделали исходный текст программы более понятным и удобным для человека и значительно увеличили производительность труда программистов. В современных условиях качественная программа должна обладать, помимо надежности и эффективности, ещё и таким важнейшим качеством как понимаемость. Для улучшения понятности можно использовать сочетание некоторых языков высокого уровня с языком ДРАКОН, которые вместе образуют, так называемые, «гибридные языки ДРАКОНа»: Дракон-Delphi, Дракон-1С, Дракон-ASM, Дракон-Oberon, Дракон-Java, Дракон-C#, Дракон-C, Дракон-Python, Дракон-Tcl, Дракон-Javascript, Дракон-Lua, Дракон-Erlang. При этом функция исходного кода программы переходит к дракон-схемам. Это позволяет отказаться от текстовых управляющих структур, используемых в языках высокого уровня, и заменить их на управляющую графику ДРАКОНа. Исходный код программы становится более понятным и удобным для человека, увеличивается производительность труда программистов
.

Алфавит графических единиц языка ДРАКОН
Основой графического синтаксиса языка ДРАКОН является графический алфавит. Алфавит состоит из графических элементов (графических фигур), которые называются иконами.
В языке ДРАКОН имеется 27 икон (см. рисунок).
Для каждой иконы задана ориентация, однозначно показано направление соединительных линий, входов и выходов. Благодаря жёстко заданной ориентации икон и соединительных линий в большинстве случаев отпадает необходимость использовать стрелки.
Стрелки в дракон-схемах используются крайне редко — только для обозначения некоторых типов цикла.
Благодаря отсутствию стрелок дракон-схемы становятся более лаконичными.

В циклах ДЛЯ (for и foreach), а также в веточных циклах стрелки никогда не используются.Отсутствие стрелок, минимизация изломов линий, запрет на использование пересечений, отсутствие внутренних соединителей (предназначенных для того, чтобы избежать пересечения соединительных линий), соблюдение специальных математических и эргономичных правил (правило шампура, правило главного маршрута, правило побочных маршрутов, правило рокировки и т. д.) и ряд других особенностей — всё это в совокупности обеспечивает повышение качества дракон-схем. Именно поэтому некоторые авторы характеризуют или отождествляют дракон-схемы как «правильно составленные блок-схемы».
ДРАКОН имеет не только иконы, но и макроиконы. Макроиконы — это графические слова языка ДРАКОН. Подобно тому, как слова слагаются из букв, макроиконы (графические слова) состоят из икон (графических букв). В языке ДРАКОН имеется 21 макроикона (см. рисунок). Иконы и макроиконы — это строительные блоки, из которых создаются дракон-схемы.
Важной частью макроикон служат валентные точки (на рисунке они показаны как маленькие чёрные кружки). В эти точки последовательно вводятся иконы и макроиконы, которые в совокупности образуют графический узор и (после заполнения икон текстом) превращаются в дракон-схему.

Нотация для моделирования потоков работ
По мнению доктора технических наук профессора Александра Потий и др., использование дракон-схем в качестве нотации для моделирования потоков работ (workflows) позволяет избежать недостатков, присущих традиционным нотациям описания процесса, например, IDEF3. Основой дракон-схемы является чертёж, предназначенный быть простым и понятным, который обеспечивает более высокую продуктивность мозга за счёт «симультанизации» зрительного восприятия чертежа.
Симультанизация означает увеличение скорости работы мозга при переходе от сукцессивного восприятия текста (медленный прием детальной информации с помощью центрального зрения (central vision)) к быстрому симультанному восприятию чертежа (быстрый панорамный прием обзорной информации с помощью периферийного зрения (peripheral vision)), то есть восприятию имеющейся структуры программы той же структурой мозга, которая распознаёт фигуры и узоры. Благодаря использованию специальных формальных и неформальных когнитивных приёмов нотация drakon-chart дает возможность изобразить любой, даже очень сложный процесс в ясной и доходчивой форме. Такая форма позволяет значительно сократить интеллектуальные усилия эксперта, необходимые для зрительного восприятия, понимания, верификации и безошибочного принятия решения относительно степени соответствия характеристик процесса заданным требованиям. Иными словами, блок-схемы, выполненные по инструкциям к ДРАКОНу, используют приёмы графического дизайна как готовый способ облегчения восприятия информации, содержащейся в программе, а именно, позволяет охватить всю структуру программы, прилагая малое количество внимания (не предъявляя требований к en:Attention span имеющего дело с программой человека и не занимая его внимание долгое время).
При этом облегчается понимание описываемых процессов и обеспечивается их однозначное толкование различными экспертами, что способствует обеспечению выполнения требования повторяемости к результатам оценки.

Правильно построенная блок-схема
Дракон-схема — это блок-схема с точно определёнными свойствами. В этом разделе дан сравнительный анализ свойств и показано, что дракон-схема является правильно составленной блок-схемой.

Блок-схема: достоинства и недостатки
Блок-схемы популярны, так как они графически отображают логику программы с помощью стандартных геометрических фигур и соединительных линий. Они представляют собой «интуитивно понятный метод представления управляющей последовательности алгоритма».
Вместе с тем, блок-схемы подвергаются критике. Противники блок-схем утверждают, что они не поддаются формализации, поэтому их «нельзя использовать как программу для непосредственного ввода в машину». Блок-схемы не согласуются со структурным программированием, поскольку в значительной степени ориентированы на использование goto. Блок-схемы широко использовались в течение ряда лет, однако сейчас их популярность падает; они «затемняют особенности программ, созданных по правилам структурного программирования».
При достаточно большой степени детализации блок-схемы становятся «громоздкими и теряют своё основное достоинство — наглядность структуры алгоритма». Обозримыми и понятными являются блок-схемы только для небольших алгоритмов. Доктор технических наук профессор Михаил Лекарев полагает, что если для простой задачи блок-схемы алгоритмов обеспечивают безусловную наглядность, то с ростом сложности ситуация меняется на противоположную: логическая структура алгоритма становится трудной для восприятия и исчезает, превращаясь в «клубок спагетти».
Блок-схемы продолжают оставаться самой известной нотацией для записи алгоритмов. Однако сегодня эта нотация для программистов «утратила свою актуальность». Основной недостаток блок-схем заключается в том, что они не приучают к аккуратности при разработке алгоритма. Ромб можно поставить в любом месте блок-схемы, а от него повести выходы на какие угодно участки. «Так можно быстро превратить программу в запутанный лабиринт, разобраться в котором через некоторое время не сможет даже сам её автор».

Дракон-схема — это упорядоченная блок-схема
Блок-схемы не позволяют изображать сложные алгоритмы с необходимой полнотой и наглядностью. Чтобы устранить недостатки, нужно упорядочить блок-схемы. Упорядоченные блок-схемы (в данном случае drakoncharts или дракон-схемы) подчиняются строгим формальным правилам и правилам эргономичных алгоритмов.
В отличие от классических блок-схем, упорядоченные дракон-схемы пригодны для формализованной записи и автоматического получения исполняемого кода. Запрещено пересечение линий, которое путает читателей и затрудняет понимание алгоритма, удалены другие недочёты. Дракон-схемы позволяют ликвидировать или существенно ослабить недостатки блок-схем.
Упорядоченные блок-схемы специально сконструированы таким образом, чтобы превратить сложный алгоритм в удобную схему, обеспечивающую быстрое и лёгкое понимание. По мнению специалистов, благодаря использованию дракон-схем алгоритмы становятся более понятными, доходчивыми, ясными, прозрачными.
Эргономичные методы, применяемые в дракон-схемах, существенно улучшают восприятие алгоритмов. Язык упорядоченных блок-схем обеспечивает разработку сложных алгоритмов с сохранением наглядности даже для многостраничных схем.
Имеются медицинские учебники, в которых используются наглядные графические инструкции для медицинского персонала, написанные в виде упорядоченных блок-схем на языке ДРАКОН.

Рекомендации Эдсгера Дейкстры по совершенствованию блок-схем
В классической работе «Заметки по структурному программированию» Эдсгер Дейкстра использовал блок-схемы для анализа структуры программ и предложил четыре принципа структуризации блок-схем:

Принцип ограничения топологии блок-схем. Структурная программа должна приводить «к ограничению топологии блок-схем по сравнению с различными блок-схемами, которые могут быть получены, если разрешить проведение стрелок из любого блока в любой другой блок. Отказавшись от большого разнообразия блок-схем и ограничившись данными тремя типами операторов управления [следование, ветвление, цикл], мы следуем тем самым некоей последовательностной дисциплине».
Принцип вертикальной ориентации входов и выходов блок-схем. Имея в виду шесть типовых блок-схем (if-do, if-then-else, case-of, while-do, repeat-until), Дейкстра пишет: «Общее свойство всех этих блок-схем состоит в том, что у каждой из них один вход вверху и один выход внизу».
Принцип единой вертикали. Вход и выход каждой типовой блок-схемы должны лежать на одной вертикали.
Принцип нанизывания блок-схем на единую вертикаль. Типовые блок-схемы следует соединять между собой, не допуская изломов соединительных линий, чтобы выход верхней и вход нижней блок-схемы лежали на одной вертикали.Обычная практика разработки и вычерчивания блок-схем не учитывает рекомендации Дейкстры. Это объясняется тем, что принципы Дейкстры не получили своего закрепления в стандартах на блок-схемы — международном стандарте ISO 5807:85 и ГОСТ 19.701—90.
Рекомендации Эдсгера Дейкстры очень важны, так как они открывают путь к совершенствованию блок-схем, делают их более удобными и наглядными. Дракон-схемы — это усовершенствованные блок-схемы, построенные на основе принципов Дейкстры. Принципы необходимы потому, что они позволяют осуществить структуризацию и формализацию схем программ.

Идея ограничения топологии схем программ с целью их лучшей структуризации и формализации лежит в основе визуального языка программирования ДРАКОН и построенного на его основе шампур-метода как абстрактной визуальной модели программы.
Дракон-схемы есть не что иное, как правильно составленные блок-схемы. Язык ДРАКОН строится на основе блок-схем с целью их улучшения. Использование эргономичных правил ДРАКОНа позволяет упорядочить графический чертёж алгоритма и обеспечить более эффективное восприятие блок-схемы человеком.
Методы проектирования, ориентированные на дракон-схемы, позволяют преодолеть алгоритмическую сложность. Существенно, что усовершенствованные блок-схемы, построенные по правилам языка ДРАКОН, обеспечивают разработку сложных алгоритмов «с сохранением наглядности даже для многостраничных схем». По мнению некоторых учёных, хотя стандарты на блок-схемы считаются действующими, фактически они давно устарели. С появлением дракон-схем блок-схемы потеряли своё значение, так как они во всех отношениях уступают дракон-схемам. Для построения блок-схем наиболее рационально использовать алгоритмический язык ДРАКОН.
Для обозначения блок-схем, построенных по правилам языка ДРАКОН, используется термин «дракон-схемы». Дракон-схема — это упорядоченная и усовершенствованная на основании принципов Дейкстры блок-схема.
По своей концепции же ДРАКОН был создан как способ сделать тождественной блок-схему программы и готовый к компиляции исходный код программы
То есть: подобный подход резко снижал время, требуемое на подготовку инженера к овладению программированием, практически устраняя «порог вхождения» для работы с программой. Иными словами, ДРАКОН задуман как язык, имеющим одновременно высокую мощь, лёгок в освоении и имеющий низкий порог требований к программисту (низкий «порог вхождения»)

Отзывы касательно дракон-схем
ДРАКОН — это эргономичный стандарт для графического представления учебной информации. Язык ДРАКОН учит методистов и учителей правильному составлению блок-схем.
Визуальный язык ДРАКОН образует наглядную среду для первоначального обучения программированию и мог бы быть весьма полезен при организации школьных курсов информатики.
Блок-схемы, нарисованные по правилам языка ДРАКОН, отличаются четкостью, наглядностью и прозрачностью структуры. А наглядность и доходчивость алгоритмов — это именно то, чего так остро недостает школьным учебникам.
При разработке единого стандарта на блок-схемы, снабженного компьютерной поддержкой и рассчитанного на «постепенное внедрение во всех отраслях и предметных областях, целесообразно взять за основу язык ДРАКОН».

Примеры правильно построенных блок-схем
Этот раздел описывает особенности для блок-схем, удовлетворяющих требованиям языка ДРАКОН, позволяющих называть их дракон-схемами.

Развилка
На рисунке (справа) показана дракон-схема «развилка» — графический оператор ветвления с двумя ветвями. Икона «вопрос» имеет один вход сверху и два выхода: вниз и вправо. Выход влево (в отличие от блок-схем) запрещен и никогда не используется. У остальных икон входы и выходы ориентированы строго по вертикали. Благодаря продуманной графической дисциплине в языке ДРАКОН применяются правила, облегчающие понимание смысла алгоритма и обеспечивающие быстрое восприятие читателем алгоритма в целом.
В дракон-схеме маршруты алгоритма следует рисовать не хаотично, а упорядоченно — по принципу «Чем правее — тем хуже»; чем правее расположен маршрут, тем более неприятную ситуацию он описывает. На рисунке (справа) два маршрута. Они соответствуют двум ситуациям. Если нет дождя — это хорошо, если дождь идет — плохо. Главный маршрут алгоритма (основная ветвь программы) идет по левой вертикали (по шампуру), демонстрируя, что все хорошо. Переход вправо (на правую вертикаль) описывает нежелательную ситуацию, потому что неприятно гулять под дождем.
Правило «Чем правее, тем хуже» — одно из многих правил, которые в совокупности значительно облегчают чтение, понимание, анализ и разработку сложных алгоритмов.

Цикл ДО (do-while)
На рисунке (справа) показана дракон-схема «Цикл ДО» — графический оператор do-while. Спортсмен или культурист, чтобы накачать мускулатуру, поднимает штангу до тех пор, пока не устанет. Если устал, тренировка прекращается.
В цикле ДО сначала выполняется действие (Подними вес) и только после этого задается вопрос (Устал?).
Икона «вопрос» изображается так же, как и в предыдущем случае. Она имеет один вход сверху и два выхода: вниз и вправо. Выход влево запрещен.
В блок-схемах линии расположены хаотично и могут быть направлены в любую сторону. Поэтому для указания направления процесса в блок-схеме необходимы стрелки. В дракон-схеме ситуация иная. Беспорядок устранен, все линии упорядочены и направлены строго вниз. Поэтому необходимость в стрелках отпадает. Исключением является стрелка цикла, которая загибается вверх против часовой стрелки.
Иллюстрация справа демонстрирует не программу и не поток управления (control flow), а поток работ (workflow). Язык ДРАКОН позволяет единообразно описывать потоки управления и потоки работ, используя единый набор графических операторов. Суть в том, что ДРАКОН является не только языком программирования, но и языком описания бизнес-процессов, учебным языком для изучения медицинских алгоритмов и т. д.

Цикл ПОКА (while)
На рисунке (справа) показана дракон-схема «Цикл ПОКА» — графический оператор while. Человек проголодался, но дома нет ничего, кроме котлет. Он ест одну котлету за другой, пока не насытится.
В цикле ПОКА сначала задается вопрос (Голодный?) и только после этого выполняется (или не выполняется) действие (Съешь котлетку). В самом деле, если человек с самого начала не голоден, он обедать не станет. На рисунке отказ от еды изображен так. Если перед обедом на вопрос «Голодный?» получен отрицательный ответ, значит, из иконы «Вопрос» выходим вниз через Нет и действие «Съешь котлетку» ни разу не выполняется.
Рассмотрим три последних примера. Все они нарисованы единообразно — во всех схемах начало и конец расположены на одной вертикали (на шампуре), причем эта вертикаль не имеет разрывов и изломов. Подобное единообразие содействует стандартизации дракон-схем и облегчает их запоминание.

Ориентация входных и выходных линий графических фигур
Ещё одно отличие дракон-схем от блок-схем состоит в том, что ориентация входных и выходных линий графоэлементов (икон) в дракон-схемах задана однозначно, а в блок-схемах — неоднозначно. Например, в блок-схемах входную линию можно подводить к графическому блоку (символу) не одним, а двумя разными способами — не только сверху, но и слева. Выходную линию можно присоединять к блоку (символу) не одним, а тремя способами — не только внизу, но и справа и даже слева.
В языке ДРАКОН этот недостаток устранен с помощью принципов Эдсгера Дейкстры, использованных для однозначного упорядочивания входных и выходных линий графических фигур.

Анимация ДРАКОН-алгоритма «силуэт»
Иллюстрация внизу демонстрирует работу алгоритмической конструкции силуэт в динамике с помощью анимации. Анимация показывает перемещение рабочей точки дракон-алгоритма от начала до конца с учетом работы циклов.
Алгоритм «Рыбная ловля» (Fishing) состоит из четырех веток::

Подготовка к ловле (Preparing for fishing).
Ожидание клева (Waiting for a bite).
Рыбацкая работа (Fishing work).
Обратная дорога (Way back).Главный маршрут каждой ветки показан с помощью жирной линии, которая называется шампур.
Каждый маршрут от иконы Заголовок «Fishing» до иконы Конец осуществляется с помощью непрерывной линии, не имеющей разрывов. Анимация показывает, что любой человек может провести по маршруту пальцем или указкой, не отрывая палец от бумаги или экрана.
Это означает, что в силуэте граф потока управления всегда имеет путь между входной вершиной графа (иконой Заголовок) и любой вершиной (узлом) графа потока управления. Следовательно, силуэт не может иметь «мертвого кода» (недостижимых вершин) графа потока управления.

Применение языка ДРАКОН в медицине
Введение
Медицинские алгоритмы используются во врачебной практике и медицинских исследованиях в текстовой и графической форме. Графическое представление медицинских алгоритмов в виде блок-схем и дракон-схем используется для наглядного изображения действий медицинского персонала и процессов, протекающих в организме пациента.
На первом этапе применялись блок-схемы, заменившие неудобное и ненаглядное текстовое описание алгоритмов. Например, графические медицинские алгоритмы представлены в учебнике «Практическое руководство для врачей общей (семейной) практики», вышедшем под научной редакцией академика РАМН, доктора медицинских наук, профессора Игоря Денисова. В учебнике в виде блок-схем графически показаны диагностические алгоритмы клинических синдромов, часто встречающиеся в практике, например:

алгоритм «Остро возникшая головная боль»;
алгоритм «Синкопальное состояние»;
алгоритм «Кровохарканье»;
алгоритм «Одышка»;
алгоритм «Дисфагия»;
алгоритм «Острая диарея».Учебник предназначен для врачей общей практики (семейных врачей), участковых терапевтов и педиатров, амбулаторно-поликлинических врачей других специальностей, интернов, клинических ординаторов, студентов медицинских вузов.

Упорядоченные медицинские блок-схемы
Со временем выяснилось, что блок-схемы не позволяют изображать сложные алгоритмы с необходимой полнотой и наглядностью. Недостаток блок-схем состоит в том, что при большой степени детализации они становятся громоздкими и теряют своё основное достоинство — наглядность структуры алгоритма. Кроме того, блок-схемы не приучают к аккуратности при описании алгоритма. Ромб можно поставить в любом месте блок-схемы, а от него повести выходы на какие угодно участки. Так можно быстро превратить алгоритм в запутанный лабиринт, разобраться в котором через некоторое время не сможет даже сам его автор.
Возникла необходимость устранить отмеченные недостатки и упорядочить блок-схемы. Упорядоченные блок-схемы (дракон-схемы) подчиняются строгим формальным правилам и правилам эргономичных алгоритмов. Запрещено пересечение линий, которое путает читателей и затрудняет понимание алгоритма. Дракон-схемы позволяют ликвидировать или существенно ослабить недостатки блок-схем. Упорядоченные блок-схемы специально сконструированы таким образом, чтобы превратить сложный алгоритм в удобную схему, обеспечивающую быстрое и легкое понимание. Эргономичные методы, применяемые в дракон-схемах, существенно улучшают восприятие алгоритмов. Язык упорядоченных блок-схем обеспечивает разработку сложных алгоритмов с сохранением наглядности даже для многостраничных схем.
Имеются медицинские учебники, в которых используются наглядные графические инструкции для медицинского персонала, написанные в виде упорядоченных блок-схем на языке ДРАКОН.

Медицинские алгоритмы скорой помощи
В учебном курсе «Неотложная медицинская помощь» используются упорядоченные блок-схемы в качестве графических инструкций для медицинского персонала. Служба скорой помощи — одно из важнейших звеньев системы оказания медицинской помощи населению. Действия специализированных и линейных бригад скорой помощи должны выполняться очень четко; последовательности таких действий описываются с помощью дракон-схем и называются алгоритмами. В учебном курсе «Неотложная медицинская помощь» имеется глава «Как читать алгоритмы?», поясняющая порядок чтения дракон-схем.
Упорядоченные блок-схемы наглядно показывают неотложные спасательные действия и процедуры, которые должны точно и безупречно выполнять работники скорой помощи при угрожающих жизни пациента состояниях. В начале учебного курса говорится: «Последовательность сложных или более важных действий написана в алгоритмах, подготовленных по методике языка ДРАКОН. Цель алгоритмов — помочь как можно лучше запомнить последовательность действий при оказании неотложной медицинской помощи».

Медицинские алгоритмы неотложной акушерской помощи
В учебнике «Начальная неотложная акушерская помощь», изданном под научной редакцией доктора медицинских наук, профессора Руты Надишаускене, приведены медицинские алгоритмы, часто встречающиеся в практической работе неотложной акушерской помощи при диагностике, реанимации и родовспоможении, например:

алгоритм «Оценка состояния плода»;
алгоритм «Дистоция плечиков»;
алгоритм «Специализированная реанимация новорожденного»;
алгоритм «Эклампсия»;
алгоритм «Первичный осмотр пострадавшего»;
алгоритм «Начальная реанимация и дефибрилляция».Алгоритмы представлены в наглядной форме в виде упорядоченных блок-схем на языке ДРАКОН. Учебник предназначен для медицинских работников скорой помощи, специалистов, работающих в приемных отделениях и учащихся — будущих акушеров, фельдшеров и студентов медицинских вузов.

Медицинский алгоритм «Терапевтическая тактика при фибрилляции предсердий»
Фибрилляция предсердий (прежнее название, мерцательная аритмия) — нарушение ритма сердца, для которого характерна частая (более 350 импульсов в минуту) неритмичная хаотическая электрическая активность предсердий, приводящая к прекращению работы предсердий как единого целого. На рисунке справа представлен алгоритм терапевтической тактики при фибрилляции предсердий.
При частых (чаще одного раза в месяц) или плохо переносимых рецидивах фибрилляции предсердий с нестабильной гемодинамикой показана противорецидивная антиаритмическая терапия. Кроме того, для профилактики рецидивов используют и бета-адреноблокаторы. При безуспешности кардиоверсии или частых рецидивах фибрилляции предсердий (ФП), несмотря на медикаментозную противорецидивную терапию (или при противопоказаниях к ней) рекомендуют при хорошей переносимости ФП отказаться от попыток восстановления синусового ритма и перевести ФП в постоянную с поддержанием нормосистолии. Если у больного фибрилляция предсердий сопровождается артериальной гипотензией, острым коронарным синдромом, прогрессированием стенокардии, сердечной недостаточности, больного необходимо направить к кардиохирургу.

Медицинские алгоритмы при групповой работе врачей
Важную роль играют медицинские алгоритмы, описывающие групповую работу врачей или иного медицинского персонала. На рисунке справа представлена графическая инструкция, предписывающая и синхронизирующая между собой точно скоординированную совместную работу двух работников скорой помощи.
Инструкция определяет порядок выполнения неотложных действий медицинской бригады по спасению пострадавшего мотоциклиста, находящегося без сознания после дорожной аварии с подозрением на перелом позвоночника у основания черепа. Данный медицинский алгоритм описывает одновременную (параллельную) работу двух медицинских работников.
Дракон-схемы используются крайней мере в одном медицинском учебнике, изданном в Литве.

Послевузовское образование врачей общей практики
На рисунке справа показана упорядоченная блок-схема «План мероприятий по подготовке и проведению цикла тематического усовершенствования врачей „Организация и методика преподавания семейной медицины“». Данный план (алгоритм) предназначен для преподавателей кафедр медицинских вузов и учебных заведений послевузовского профессионального образования врачей, участвующих в подготовке врачей общей практики (семейных врачей).
На схеме выделены четыре ветки силуэта, описывающие последовательность выполняемых преподавателями работ:

— разработка учебных пособий и учебного плана;

— разработка методик;

— получение заявок на переподготовку;

— подготовка документов к занятиям.

Применение языка ДРАКОН в системе высшего образования
В 1996 году Государственный комитет Российской Федерации по высшему образованию включил изучение языка ДРАКОН в программу курса «Информатика» для направлений:

510000 — Естественные науки и математика
540000 — Образование
550000 — Технические науки
560000 — Сельскохозяйственные наукиВ официальном документе Госкомвуза «Примерная программа дисциплины „Информатика“» имеется раздел, посвященный языку ДРАКОН и использующий его понятийный аппарат:

Раздел 3. АЛГОРИТМЫ И АЛГОРИТМИЗАЦИЯ.
ВИЗУАЛИЗАЦИЯ АЛГОРИТМОВПонятие алгоритма. Визуализация алгоритмов и блок-схемы. Недостатки блок-схем. Формализация и эргономизация блок-схем. Язык визуального представления алгоритмов ДРАКОН. Линейные, разветвленные и цикличные алгоритмы. Вложенные и параллельные алгоритмы. Логические элементы и базовые управляющие структуры визуального структурного программирования. Визуальные операторы управления. Визуальные алгоритмические макроконструкции «примитив» и «силуэт».

Понимаемость алгоритмов и методы её улучшения. Понятие эргономичного алгоритма. Равносильные преобразования визуальных алгоритмов, позволяющие улучшить понимаемость: рокировка, подстановка, вертикальное и горизонтальное объединение, визуализация логических формул в условных операторах… Преобразование алгоритмов из визуальной формы в текстовую и обратно. Язык абстрактных ДРАКОН-схем как инвариант класса процедурных языков.
«Примерная программа дисциплины „Информатика“» одобрена Президиумом совета по информатике Госкомвуза. Председатель Президиума академик РАН Юрий Журавлев является руководителем Секции прикладной математики и информатики Отделения математических наук РАН, а также заместителем Академика-секретаря Отделения математических наук РАН.
В одобренной академиком Журавлевым «Примерной программе» содержится обоснование концепции и структуры учебного курса информатики; в частности, дается обоснование использования языка ДРАКОН.
Далее в Программе указываются требования к языку представления процедурных знаний нового типа: общедоступного, человечного, предельно лёгкого в изучении и удобного в работе, создающего наиболее комфортные условия для работы человеческого мозга, позволяющего решать проблемы ценою минимальных интеллектуальных усилий, удовлетворяющего самым строгим эргономическим и дидактическим требованиям. Отмечается, что этим требованиям соответствует язык ДРАКОН — «один из самых легких языков представления знаний и самый первый язык, с которого нужно начинать обучение алгоритмическому мышлению и программированию».
При коллективной интеллектуальной работе важную роль играет интеллектуальное взаимопонимание и интеллектуальное взаимодействие между специалистами. Для улучшения взаимопонимания необходимо иметь общую языковую основу. Благодаря своей человечности (эргономичности) язык ДРАКОН относительно легко устраняет барьеры взаимного непонимания (в части процедурных знаний) между работниками различных специальностей: врачами и физиками, математиками и конструкторами, биологами и экономистами, программистами и технологами и т. д. Тем самым ДРАКОН создаёт универсальную языковую основу для процедурного интеллектуального взаимодействия между людьми, в частности, между участниками многопрофильных проектов. В результате этот «язык взаимопонимания» заметно упрощает междисциплинарное и иное общение между представителями разных организаций, ведомств, отделов, лабораторий, научных школ и профессий, отчасти играя роль «производственного эсперанто».

Бакалавр любой специальности должен уметь формализовать свои процедурные профессиональные знания самостоятельно, то есть без помощи профессиональных программистов или когнитологов (инженеров по знаниям). Программа предусматривает приобретение навыков автоформализации знаний на языке ДРАКОН.

Данные о распространенности языка в ВУЗах
В Сибирском государственном индустриальном университете студенты изучают язык ДРАКОН и осваивают интегрированную среду «ИС Дракон» на кафедре прикладной информатики для представления алгоритмов решения проблем управления при подготовке магистров, обучающихся по направлению: 140400.68 «Электроэнергетика и электротехника», профили подготовки «Электроприводы и системы управления электроприводов», «Автоматизированные электромеханические комплексы и системы».
В Новокузнецком филиале Кемеровского государственного университета студенты изучают язык ДРАКОН и осваивают интегрированную среду «ИС Дракон» на кафедре математики и математического моделирования согласно программе «М2.ДВ.4 Инструментальные средства визуального программирования», составленной в соответствии с требованиями федерального государственного образовательного стандарта высшего образования по направлению подготовки 010400.68 «Прикладная математика и информатика» для магистерской программы «Математическое моделирование» и утвержденной деканом факультета информационных технологий доктором технических наук профессором Валерием Калединым.
В Белоруссии в Минском высшем радиотехническом колледже отмечают: «Как показал опыт применения языка ДРАКОН в лабораторном цикле „Изучение аналоговых и цифровых приборов“, студенты на порядок быстрее усваивают принципы работы операционных усилителей и регистрации их амплитудных и частотных характеристик».
Можно привести ещё ряд примеров, но в целом можно отметить малую известность языка среди преподавателей высшей школы.

Применение языка ДРАКОН в системе среднего образования
Начальная школа
В начальной школе факультативно используются пропедевтические курсы Александра Горячева «Информатика в играх и задачах» для 1-4 классов и «Информатика и ИКТ» для 3 и 4 класса. На первом этапе для изображения процедурных знаний в этих курсах использовались традиционные блок-схемы, но затем — после ознакомления с правилами построения ДРАКОН-схем — ситуация изменилась в пользу ДРАКОНа.
Как отмечает создатель пропедевтических курсов кандидат педагогических наук Горячев, «для представления информации о процедурных знаниях мы планируем использовать блок-схемы с рекомендациями автора визуального языка ДРАКОН».
Рабочая программа «Информатика для начинающих» для 2-4 классов, утвержденная руководителем Методического объединения педагогов Веренко Л. И., предусматривает изучение алгоритмов на основе языка ДРАКОН в рамках темы «Страна волшебных алгоритмов» (объем 26 часов) по учебному пособию «Занимательная информатика».

Основная школа (с 5-го по 9-й классы)
Изучение информатики в основной школе определяется Государственным образовательным стандартом. В 2004 году появился стандарт основного общего образования по Информатике и ИКТ (информационно-коммуникационные технологии). В соответствии со стандартом подготовлено учебное пособие по алгоритмике «Занимательная информатика», основанное на языке ДРАКОН. В 2007 году пособие вышло в свет в издательстве Дрофа — специализированном издательстве, выпускающем учебную и методическую литературу для дошкольных учреждений, начальной, основной, средней и высшей школы. Это было уже третье издание книги, исправленное и дополненное с учетом замечаний учителей и специалистов.
Учительская газета опубликовала отзыв о книге и языке ДРАКОН.

ДРАКОН — это эргономичный стандарт для графического представления учебной информации. Это, безусловно, первый и единственный такой стандарт. Блок-схемы во всех имеющихся на сегодня книгах (кроме книг по языку ДРАКОН) — составлены очень плохо. Язык ДРАКОН учит нас, методистов и учителей, правильному составлению блок-схем. Насколько я знаю, нет другой литературы, где тому же самому можно научиться настолько просто и даже увлекательно.

«Вестник Российской академии наук» о языке ДРАКОН
В журнале «Вестник Российской академии наук» опубликована рецензия доктора технических наук Я. В. Безеля, в которой отмечается, что алгоритмический язык ДРАКОН разработан совместными усилиями Российского авиационно-космического агентства (НПЦ автоматики и приборостроения им. Н. А. Пилюгина, г. Москва) и Института прикладной математики им. М. В. Келдыша РАН. Этот язык универсален. Он может применяться для наглядного представления и быстрой разработки алгоритмов не только в космосе, но и в земных видах человеческой деятельности. Практическая полезность ДРАКОНа получила высокую оценку. Министерство образования РФ включило его изучение в программу дисциплины «информатика» высшей школы. О лёгкости его усвоения говорит хотя бы тот факт, что он положен в основу игрового учебного пособия по информатике для детей младшего и среднего школьного возраста.
Как отмечает Безель, в своё время Н. И. Лобачевский дал замечательно яркую оценку искусственным языкам: «Чему одолжены своими блестящими успехами науки, слава нынешних времен, торжество ума человеческого? Без сомнения, искусственному языку своему!». Разделяя эту мысль, автор книги вместе с тем подвергает критике существующие подходы к созданию языков. Он считает, что разработчики языков не должны игнорировать накопленный наукой огромный багаж знаний об устройстве и работе мозга. Концепция искусственных языков нового поколения должна опираться на междисциплинарный подход.
Проблемы понимания и взаимопонимания, продолжает Безель, автор книги рассматривает как ключевые проблемы информатики. Понимаемость программы определяется как свойство программы минимизировать интеллектуальные усилия, необходимые для её усвоения. Одно из неоспоримых достоинств книги состоит в разработке практического метода, позволяющего создать принципиально новый подход к решению проблемы понимания, который, в свою очередь, тесно связан с проблемой улучшения работы ума.
По словам Безеля, автор демонстрирует его на примере языка ДРАКОН. При его разработке была объявлена стратегическая цель: создать наиболее комфортные условия для работы человеческого интеллекта, обеспечить наилучшие возможности для повышения эффективности коллективного разума специалистов. В результате должен появиться общедоступный, предельно лёгкий в изучении и удобный в работе язык, позволяющий решать проблемы ценою минимальных интеллектуальных усилий по принципу «сделай сам» (то есть без помощи программистов и когнитологов).

До сих пор создание алгоритмических языков было заветной «вотчиной» математиков. Данная книга представляет собой попытку осуществить своего рода переворот, суть которого в том, что гуманитарные требования к языку выдвигаются на первое место (при этом требование математической строгости, разумеется, аккуратно выполняется). ДРАКОН — первый алгоритмический язык, созданный в рамках нового мировоззрения, органично объединившего идеи психологии, эргономики и математики.

См. также
BPMN
Анализ потока управления
Визуализация графов
Граф-схема алгоритма
Граф потока управления
Порядок выполнения
Поток работ
Просмотр кода
Рефакторинг
Событийная цепочка процессов
Структурное программирование
Цикломатическая сложность

Комментарии
Примечания
Литература
Основная литература по языку ДРАКОНПаронджанов В. Д. Язык ДРАКОН. Краткое описание. — М., 2009. — 124 с.
Паронджанов В. Д. [Учись писать, читать и понимать алгоритмы. Алгоритмы для правильного мышления. Основы алгоритмизации Учебное пособие по языку ДРАКОН для вузов]. — М.: ДМК Пресс, 2012. — 520 с. — ISBN 978-5-94074-800-7. Архивировано 7 ноября 2014 года. Архивная копия от 7 ноября 2014 на Wayback Machine (Учебное пособие по языку ДРАКОН подготовлено в соответствии с «Примерной программой дисциплины „Информатика“. Издание официальное. — М.: Госкомвуз, 1996. — 21 с. / См. разделы 3 и 4, а также Приложение, пункты 1-7.»)
Паронджанов В. Д. Дружелюбные алгоритмы, понятные каждому. Как улучшить работу ума без лишних хлопот. — М.: ДМК-пресс, 2010. — 464 с. — ISBN 978-5-94074-606-5.
Паронджанов В. Д. Как улучшить работу ума. Алгоритмы без программистов — это очень просто!. — М.: Дело, 2001. — 360 с. — ISBN 5-7749-0211-0.
Паронджанов В. Д. Почему мудрец похож на обезьяну, или Парадоксальная энциклопедия современной мудрости. — М.: РИПОЛ Классик, 2007. — С. 297—434. — 1154 с. — ISBN 978-5-386-00216-9.
Паронджанов В. Д. Занимательная информатика \ Учебное пособие для учащихся 5–9 классов. — М.: Дрофа, 2007. — 192 с. — ISBN 978-5-358-01603-3.
Паронджанов В. Д. Занимательная информатика. — М.: Росмэн, 1998. — 152 с. — ISBN 2-257-00551-4.Язык ДРАКОН для медицинских работников скорой помощиНачальная неотложная акушерская помощь. Учебник. / Под ред. профессора Рута Йоланта Надишаускене. — Литва: Центр исследования кризисов, Университет наук здоровья Литвы, 2012. — 204 с. — ISBN 978-609-8033-61-8.
Неотложная медицинская помощь. Материалы курса. — Литва: Центр исследования кризисов, Каунасский медицинский университет, 2012. — 265 с.
Специализированная реанимация новорожденного. Учебник. / Под ред. профессора Рута Йоланта Надишаускене. — Литва: Центр исследования кризисов, Университет наук здоровья Литвы, 2012. — 396 с.
Травма. Учебник. / Под ред. доктора мед. наук Динаса Вайткайтиса. — Литва: Центр исследования кризисов, Университет наук здоровья Литвы, 2012. — 440 с. — ISBN 978-609-8033-62-5.Другие авторитетные источникиД. А. Щелкунов, П. В. Павлов, И. А. Князев. № 10 // Средство визуального программирования «Силуэт». — 2003. — С. 57—60. — (Приборостроение и средства автоматизации. Энциклопедический справочник).
Тюгашев А. А. Графические языки программирования и их применение в системах реального времени. — Самара: Самарский научный центр РАН, 2009. — 98 с. — ISBN 978-5-93424-454-6.
Пышкин Е. В. Структурное проектирование: основание и развитие методов. С примерами на языке C++: Учеб. пособие. — СПб.: Политехнический университет, 2005. — 324 с. — ISBN 5-7422-1000-0
Ю. И. Рогозов, А. А. Дубровский, А. С. Свиридов. 12 (89) // Новый подход реализации идеи «программирование без программиста». — Таганрог: ТТИ ЮФУ (Южный федеральный университет), 2008. — С. 186—193. — (Известия ЮФУ. Технические науки. Тематический выпуск «Перспективные системы и задачи управления»).
Павлова Н. Ф. Стратегическое планирование развития территориальных социальных образований в схемах. — Екатеринбург: Уральское отделение РАН, 2002. — 119 с. — ISBN 5-7691-1400-2.
Осипова Н. А., Рихванов Л. П., Кропачев А. В. Создание экспертно-обучающей системы на базе алгоритмического подхода для учебного курса «техногенные системы и экологический риск». — Томский политехнический университет.
Саркисян А. А. Повышение качества программ на основе автоматизированных методов. — М.: Радио и связь, 1991. — 160 с. — ISBN 5-256-00629-0.
Штурманы ракет / Под общей редакцией Е. Л. Межирицкого.. — М.: БЛОК-Информ-Экспресс, 2008. — 384 с. — ISBN 978-5-93735-008-4.
Практическое руководство для врачей общей (семейной) практики / Под ред. академика РАМН И. Н. Денисова. — М.: ГЭОТАР-МЕД, 2001. — 720 с. — ISBN 5-9231-0050-9.Материалы научных, научно-методических и научно-практических конференцийШамардина Е. И., Манюнин П. А. Секция 17. Системы управления космических аппаратов и комплексов // Язык программирования «Дракон» и его применения за пределами ракетно-космических проектов. Разработка математической модели и редактора. — ИИЕТ РАН. (недоступная ссылка)
Созоров Н. Г., Трошин М. В. Дракон-редактор как основное звено в формализации целевых дидактических ресурсов для проектирования интерактивного учебного курса. — (Материалы региональной научно-методической конференции ИДНО Томского политехнического университета «Электронные дидактические материалы в инженерном образовании» 11-12 октября 2009 г.).
Гришаева О. В. Алгоритмический подход при организации учебно-исследовательской работы студентов на лабораторно-практических занятиях по органической химии. — Кемеровская государственная медицинская академия. — (Университетская научно-методическая конференция Томского политехнического университета «Совершенствование содержания и технологии учебного процесса», г. Томск, 9—10 февраля 2010 г.).
Титова Е. В. Часть 3. // Алгоритмический язык Дракон в лингвистике. — Минск: БГУ, 2011.. — С. 50—52. — (Сборник работ 68-й научной конференции студентов и аспирантов Белорусского государственного университета в трех частях).
Дробушевич Л. Ф., Конах В. В. ч. 1 // Способы визуализации алгоритмов и программ / С. В. Абламейко и др.. — Минск: БГУ, 2011. — С. 345—351. — 519 с. — (Международный конгресс по информатике : информационные системы и технологии : материалы международного научного конгресса (Республика Беларусь, Минск, 31 окт. — 3 нояб. 2011 г. в 2 ч.)). — ISBN 978-985-518-563-6.
Дробушевич Л. Ф., Конах В. В. Анализ топологий визуальных нотаций для записи алгоритмов и программ = Information Technologies and Systems 2011 (ITS 2011) : Proceeding of The International Conference, BSUIR, Minsk, 26th October 2011. / Л. Ю. Шилин и др.. — Минск: БГУИР, 2011. — С. 212—213. — 306 с. — (Информационные технологии и системы 2011 (ИТС 2011) : материалы международной научной конференции, БГУИР, Минск, Беларусь, 26 октября 2011 г.). — ISBN 978-985-488-816-3.

Ссылки
drakon.su — официальный сайт Визуального языка ДРАКОН
Официальные форумы сайта «Визуальный язык ДРАКОН» (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Дополнительный сайт «Алгоритмический язык ДРАКОН» (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Сергей Ефанов. Программирование микроконтроллеров на ДРАКОНе (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Визуальный язык ДРАКОН и его применение в ракетно-космической отрасли, медицине и других областях. Видео доклада В. Паронджанова (неопр.). Архивировано 24 мая 2013 года.
Паронджанов В.Д. Занимательная информатика, или Волшебный Дракон в гостях у Мурзика. — М.: Росмэн, 2000. — 160с. — ISBN 5-257-00929-3 (неопр.). Дата обращения 3 февраля 2014 года. Архивировано 24 мая 2013 года.Программа Степана Митькина «DRAKON Editor»Степан Митькин. Программа DRAKON Editor (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Первый видеоролик по программе DRAKON Editor (DRAKON Editor 1.8 Gameplay) (неопр.). Дата обращения 24 января 2013 года.
Второй видеоролик по программе DRAKON Editor (DRAKON Editor and Dijkstra’s algorithm) (неопр.). Дата обращения 24 января 2013 года.
Mitkin S.B. DRAKON: The Human Revolution in Understanding Programs (англ.) 33 (октябрь 2011). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.Программа «ИС Дракон»Геннадий Тышов. Интегрированная среда разработки языка ДРАКОН «ИС Дракон». Скачать (неопр.). Дата обращения 25 февраля 2015 года.
Калиногорский Н. А. Автоматизация процесса разработки алгоритмов управления в интегрированной среде Дракон. \ Методические указания. — Новокузнецк, Изд. центр СибГИУ, 2013. — 50с. (неопр.). Дата обращения 25 января 2014 года. Методические указания разработаны на Кафедре прикладной информатики Института информационных технологий и автоматизированных систем Сибирского государственного индустриального университета, г. Новокузнецк.
Дополнительный форум «Обсуждение программы ИС Дракон» (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Сергей Ефанов. Первый видеоролик. Использование языка ДРАКОН для программирования микроконтроллеров с помощью ИС Дракон. Часть 1. Разработка программы управления автоматическим дверным замком (неопр.). Дата обращения 15 февраля 2014 года.
Сергей Ефанов. Второй видеоролик. Использование языка ДРАКОН для программирования микроконтроллеров с помощью ИС Дракон. Часть 2. Программирование битовых операций: инициализация процессора, настройка таймера и т.д. Компиляция. Загрузка полученной программы в постоянную память процессора («прошивка») (неопр.). Дата обращения 15 февраля 2014 года.
Сергей Ефанов. Третий видеоролик. Использование языка ДРАКОН для программирования микроконтроллеров с помощью ИС Дракон. Часть 3. Проектирование сложного алгоритма реального времени. Проектирование разветвленного алгоритма. Проектирование циклов. Оператор ожидания. Оператор "пауза". (на примере управления дверным замком) (неопр.). Дата обращения 15 февраля 2014 года.
Сергей Ефанов. Четвёртый видеоролик. Использование языка ДРАКОН для программирования микроконтроллеров с помощью ИС Дракон. Часть 4. Работа с несколькими таймерами. В какой момент нужно запустить каждый таймер? Управление шиной процессора. (на примере управления дверным замком) (неопр.). Дата обращения 15 февраля 2014 года.Дополнительные материалыДмитрий Дагаев. Алаверды Дракону. (Использование языка ДРАКОН при проектировании АСУ в атомной энергетике). (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Владислав Жаринов. Драконографика. Обзор языка ДРАКОН (неопр.). Дата обращения 24 января 2013 года. Архивировано 2 февраля 2013 года.
Раздел 3. Алгоритмы и алгоритмизация. Визуализация алгоритмов // Примерная программа дисциплины «Информатика». Издание официальное. — М.: Госкомвуз, 1996. — С. 3—4. — 21 с.