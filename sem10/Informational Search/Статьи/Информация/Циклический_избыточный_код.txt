Циклический избыточный код (англ. Cyclic redundancy check, CRC) — алгоритм нахождения контрольной суммы, предназначенный для проверки целостности данных. CRC является практическим приложением помехоустойчивого кодирования, основанным на определённых математических свойствах циклического кода.

Введение
Понятие циклические коды достаточно широкое. В англоязычной литературе CRC понимается двояко в зависимости от контекста: Cyclic Redundancy Code или Cyclic Redundancy Check. Под первым понятием подразумевают математический феномен циклических кодов, под вторым — конкретное применение этого феномена как хеш-функции.

Помехоустойчивое кодирование
Первые попытки создания кодов с избыточной информацией начались задолго до появления современных компьютеров. К примеру, ещё в 1960-х годах Ридом и Соломоном была разработана эффективная методика кодирования — Код Рида-Соломона. Использование её в те времена не представлялось возможным, так как произвести операцию декодирования за разумное время первыми алгоритмами не удавалось. Точку в этом вопросе поставила фундаментальная работа Берлекэмпа, опубликованная в 1968 году. Эта методика, на практическое применение которой указал через год Мэсси, и по сей день используется в цифровых устройствах, обеспечивающих приём RS-кодированных данных. Более того: данная система позволяет не только определять позиции, но и исправлять неверные кодовые символы (чаще всего октеты).
Но далеко не всегда от кода требуется коррекция ошибок. Многие современные каналы связи обладают приемлемыми характеристиками, и зачастую достаточно лишь проверить, успешно ли прошла передача или возникли  какие-нибудь  сложности; структура же ошибок и конкретные позиции неверных символов совершенно не интересуют принимающую сторону. И в этих условиях очень удачным решением оказались алгоритмы, использующие контрольные суммы. CRC как нельзя лучше подходит для подобных задач: невысокие затраты ресурсов, простота реализации и уже сформированный математический аппарат из теории линейных циклических кодов обеспечили ей огромную популярность.
Хотя код CRC используют обычно только для обнаружения ошибок, его математические свойства дают возможность найти и исправить одиночную ошибку в блоке бит, если каждому биту защищаемого блока (включая проверочные биты) соответствует свой уникальный остаток от деления на порождающий многочлен. Например, если порождающий многочлен неприводим, и длина блока не превышает порядок порождённой циклической группы.

Контрольная сумма
В общем виде контрольная сумма представляет собой некоторое значение, вычисленное по определённой схеме на основе кодируемого сообщения. Проверочная информация при систематическом кодировании приписывается к передаваемым данным. На принимающей стороне абонент знает алгоритм вычисления контрольной суммы: соответственно, программа имеет возможность проверить корректность принятых данных.
При передаче пакетов по сетевому каналу могут возникнуть искажения исходной информации вследствие разных внешних воздействий: электрических наводок, плохих погодных условий и многих других. Сущность методики в том, что при хороших характеристиках контрольной суммы в подавляющем числе случаев ошибка в сообщении приведёт к изменению его контрольной суммы. Если исходная и вычисленная суммы не равны между собой, принимается решение о недостоверности принятых данных, и можно запросить повторную передачу пакета.

Математическое описание
Алгоритм CRC базируется на свойствах деления с остатком двоичных многочленов, то есть многочленов над конечным полем 
  
    
      
        G
        F
        (
        2
        )
      
    
    {\displaystyle GF(2)}
  . Значение CRC является по сути остатком от деления многочлена, соответствующего входным данным, на некий фиксированный порождающий многочлен.
Каждой конечной последовательности битов 
  
    
      
        
          a
          
            0
          
        
        ,
        
          a
          
            1
          
        
        ,
        …
        ,
        
          a
          
            N
            −
            1
          
        
      
    
    {\displaystyle a_{0},a_{1},\dots ,a_{N-1}}
   взаимно однозначно сопоставляется двоичный полином 
  
    
      
        
          
            ∑
            
              n
              =
              0
            
            
              N
              −
              1
            
          
          
            a
            
              n
            
          
          
            x
            
              n
            
          
        
      
    
    {\displaystyle \textstyle \sum _{n=0}^{N-1}a_{n}x^{n}}
  , последовательность коэффициентов которого представляет собой исходную последовательность. Например, последовательность битов 1011010 соответствует многочлену:

  
    
      
        P
        (
        x
        )
        =
        1
        ⋅
        
          x
          
            6
          
        
        +
        0
        ⋅
        
          x
          
            5
          
        
        +
        1
        ⋅
        
          x
          
            4
          
        
        +
        1
        ⋅
        
          x
          
            3
          
        
        +
        0
        ⋅
        
          x
          
            2
          
        
        +
        1
        ⋅
        
          x
          
            1
          
        
        +
        0
        ⋅
        
          x
          
            0
          
        
        =
        
          x
          
            6
          
        
        +
        
          x
          
            4
          
        
        +
        
          x
          
            3
          
        
        +
        
          x
          
            1
          
        
        .
      
    
    {\displaystyle P(x)=1\cdot x^{6}+0\cdot x^{5}+1\cdot x^{4}+1\cdot x^{3}+0\cdot x^{2}+1\cdot x^{1}+0\cdot x^{0}=x^{6}+x^{4}+x^{3}+x^{1}.}
  Количество различных многочленов степени, меньшей 
  
    
      
        N
      
    
    {\displaystyle N}
  , равно 
  
    
      
        
          2
          
            N
          
        
      
    
    {\displaystyle 2^{N}}
  , что совпадает с числом всех двоичных последовательностей длины 
  
    
      
        N
      
    
    {\displaystyle N}
  .
Значение контрольной суммы в алгоритме с порождающим многочленом 
  
    
      
        G
        (
        x
        )
      
    
    {\displaystyle G(x)}
   степени 
  
    
      
        N
      
    
    {\displaystyle N}
   определяется как битовая последовательность длины 
  
    
      
        N
      
    
    {\displaystyle N}
  , представляющая многочлен 
  
    
      
        R
        (
        x
        )
      
    
    {\displaystyle R(x)}
  , получившийся в остатке при делении многочлена 
  
    
      
        P
        (
        x
        )
      
    
    {\displaystyle P(x)}
  , представляющего входной поток бит, на многочлен 
  
    
      
        G
        (
        x
        )
      
    
    {\displaystyle G(x)}
  :

  
    
      
        R
        (
        x
        )
        =
        P
        (
        x
        )
        ⋅
        
          x
          
            N
          
        
        
        
          mod
          
            
          
        
        G
        (
        x
        )
      
    
    {\displaystyle R(x)=P(x)\cdot x^{N}\,{\bmod {\,}}G(x)}
  где

  
    
      
        R
        (
        x
        )
      
    
    {\displaystyle R(x)}
   — многочлен, представляющий значение CRC;

  
    
      
        P
        (
        x
        )
      
    
    {\displaystyle P(x)}
   — многочлен, коэффициенты которого представляют входные данные;

  
    
      
        G
        (
        x
        )
      
    
    {\displaystyle G(x)}
   — порождающий многочлен;

  
    
      
        N
      
    
    {\displaystyle N}
   — степень порождающего многочлена.Умножение 
  
    
      
        
          x
          
            N
          
        
      
    
    {\displaystyle x^{N}}
   осуществляется приписыванием 
  
    
      
        N
      
    
    {\displaystyle N}
   нулевых битов к входной последовательности, что улучшает качество хеширования для коротких входных последовательностей.
При делении с остатком различных исходных многочленов на порождающий полином 
  
    
      
        G
        (
        x
        )
      
    
    {\displaystyle G(x)}
   степени 
  
    
      
        N
      
    
    {\displaystyle N}
   можно получить 
  
    
      
        
          2
          
            N
          
        
      
    
    {\displaystyle 2^{N}}
   различных остатков от деления. 
  
    
      
        G
        (
        x
        )
      
    
    {\displaystyle G(x)}
   зачастую является неприводимым многочленом. Обычно его подбирают в соответствии с требованиями к хеш-функции в контексте каждого конкретного применения.
Тем не менее, существует множество стандартизированных образующих многочленов, обладающих хорошими математическими и корреляционными свойствами (минимальное число коллизий, простота вычисления), некоторые из которых перечислены ниже.

Вычисление CRC
Параметры алгоритма
Одним из основных параметров CRC является порождающий полином.
С порождающим полиномом связан другой параметр — его степень, которая определяет количество битов, используемых для вычисления значения CRC. На практике наиболее распространены 8-, 16- и 32-битовые слова, что является следствием особенностей архитектуры современной вычислительной техники.
Ещё одним параметром является начальное (стартовое) значение слова. Указанные параметры полностью определяют «традиционный» алгоритм вычисления CRC. Существуют также модификации алгоритма, например, использующие обратный порядок обработки битов.

Описание процедуры
Из файла берётся первое слово — это может быть битовый (CRC-1), байтовый (CRC-8) или любой другой элемент. Если старший бит в слове «1», то слово сдвигается влево на один разряд с последующим выполнением операции XOR c порождающим полиномом. Соответственно, если старший бит в слове «0», то после сдвига операция XOR не выполняется. После сдвига теряется старый старший бит, а младший бит освобождается — его значение устанавливается равным нулю. На место младшего бита загружается очередной бит из файла, и операция повторяется до тех пор, пока не загрузится последний бит файла. После прохождения всего файла, в слове остается остаток, который и является контрольной суммой.

Популярные и стандартизованные полиномы
В то время, как циклические избыточные коды являются частью стандартов, у этого термина не существует общепринятого определения — трактовки различных авторов нередко противоречат друг другу.Этот парадокс касается и выбора многочлена-генератора: зачастую стандартизованные полиномы не являются самыми эффективными в плане статистических свойств соответствующего им check redundancy code.
При этом многие широко используемые полиномы не являются наиболее эффективными из всех возможных. В 1993—2004 годах группа учёных занималась исследованием порождающих многочленов разрядности до 16, 24 и 32 бит и нашла полиномы, дающие лучшую, нежели стандартизированные многочлены, производительность в смысле кодового расстояния. Один из результатов этого исследования уже нашёл своё применение в протоколе iSCSI.
Самый популярный и рекомендуемый IEEE полином для CRC-32 используется в Ethernet, FDDI; также этот многочлен является генератором кода Хемминга. Использование другого полинома — CRC-32C — позволяет достичь такой же производительности при длине исходного сообщения от 58 бит до 131 кбит, а в некоторых диапазонах длины входного сообщения может быть даже выше — поэтому в наши дни он тоже пользуется популярностью. К примеру, стандарт ITU-T G.hn использует CRC-32C с целью обнаружения ошибок в полезной нагрузке.
Ниже в таблице перечислены наиболее распространённые многочлены — генераторы CRC. На практике вычисление CRC может включать пре- и постинверсию, а также обратный порядок обработки битов. В проприетарных реализациях CRC для усложнения анализа кода применяют ненулевые начальные значения регистров.

Существующие стандарты CRC-128 (IEEE) и CRC-256 (IEEE) в настоящее время вытеснены криптографическими хеш-функциями.

Спецификации алгоритмов CRC
Одной из самых известных является методика Ross N. Williams. В ней используются следующие параметры:

Название алгоритма (name);Степень порождающего контрольную сумму многочлена (width);Сам производящий полином (poly). Для того, чтобы записать его в виде значения, его сначала записывают как битовую последовательность, при этом старший бит опускается — он всегда равен 1. К примеру, многочлен 
  
    
      
        
          x
          
            8
          
        
        +
        
          x
          
            4
          
        
        +
        1
      
    
    {\displaystyle x^{8}+x^{4}+1}
   в данной нотации будет записан числом 
  
    
      
        
          00010001
          
            2
          
        
      
    
    {\displaystyle 00010001_{2}}
  . Для удобства полученное двоичное представление записывают в шестнадцатеричной форме. Для нашего случая оно будет равно 
  
    
      
        
          11
          
            h
          
        
      
    
    {\displaystyle 11_{h}}
   или 0x11;Стартовые данные (init), то есть значения регистров на момент начала вычислений;Флаг (RefIn), указывающий на начало и направление вычислений. Существует два варианта: False — начиная со старшего значащего бита (MSB-first), или True — с младшего (LSB-first);Флаг (RefOut), определяющий, инвертируется ли порядок битов регистра при входе на элемент XOR;Число (XorOut), с которым складывается по модулю 2 полученный результат;Значение CRC (check) для строки «123456789» .Примеры

Примечания
Литература
Генри С. Уоррен, мл. Глава 5. Подсчет битов // Алгоритмические трюки для программистов = Hacker’s Delight. — М.: Вильямс, 2007. — 288 с. — ISBN 0-201-91465-4.

Ссылки

Элементарное руководство по CRC алгоритмам обнаружения ошибок
CRC, и как его восстановить
Генератор CRC-функций на языках VHDL и Verilog
Ross N. Williams/Anarchriz. Всё о CRC32 // Ross N. Williams. Элементарное руководство по CRC алгоритмам обнаружения ошибок
Ross N. Williams. A PAINLESS GUIDE TO CRC ERROR DETECTION ALGORITHMS (англ.)CRC КалькуляторыCRC-калькулятор, написан на Qt
On-line CRC32-калькулятор, для строк (можно менять кодировку и формат EndLine)
On-line CRC-калькулятор
On-line CRC calculation and free library