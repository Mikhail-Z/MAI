Flutter — это SDK предназначенный для создания высокопроизводительных, высококачественных мобильных приложений для iOS и Android из единой кодовой базы, с открытым исходным кодом, созданный Google. Flutter — решение для разработки кроссплатформенных мобильных приложений. Flutter написан на C, C++, Dart и Skia (движок для 2D-рендеринга). Также Flutter является основой создания приложений для Google Fuchsia.

История
Первая версия Flutter была известна как «Sky» и работала в операционной системе Android. Он был представлен на саммите Dart Developer Summit в 2015 году, с заявленным намерением последовательно отображать 120 кадров в секунду. Во время основного выступления на Google Developer Days в Шанхае Google анонсировала бета-версию — Flutter Release Preview 2, который является последним крупным выпуском до Flutter 1.0. 4 декабря 2018 года на мероприятии Flutter Live была выпущена версия Flutter 1.0, обозначающая первую стабильную версию Framework.

Архитектура
Платформа Flutter организована в виде серии слоев, каждый из которых опирается на предыдущий.
Платформа Flutter состоит из следующих слоев:

верхие слои — платформа Dart: Material, Cupertino, Widgets, Rendering, Animation, Painting, Gestures, Foundation;
движок Flutter (C++): Skia, Dart, Text;
встроенная платформа: Render Surface Setup, Native Plugins, Packaging, Thread Setup, Event Loop Interop.Платформа Dart 
Верхние слои каркаса используются чаще, чем нижние. Библиотеки являются частью базовой платформы Flutter и импортируются с использованием 'package: flutter / <library> .dart'.  
У данной платформы есть огромное количество библиотек, виджетов (виджеты для работы с ядром, анимацией, UI, виджеты реализующие текущий язык дизайна iOS/Android, локализации и многое другое). На сайте https://docs.flutter.io/index.html представлены все доступные для использования библиотеки. Библиотека Foundation, написанная на Dart, предоставляет базовые классы и функции, которые используются для конструирования приложений с использованием Flutter, таких как API для взаимодействия с движком. Также Flutter имеет богатое сообщество пакетов с открытым исходным кодом. Вы можете просмотреть эти пакеты на pub.dartlang.org  
Цель разработчиков Flutter — помочь вам сделать больше с меньшим количеством кода. Например, слой «Material» создается путем составления основных виджетов из слоя «Widgets», а сам слой «Widgets» создается путем организации объектов более низкого уровня из слоя «Rendering». 
Слои предлагают множество вариантов создания приложений. Flutter предоставляет свободу выбора: возможность создавать готовые виджеты, которые предоставляет Flutter, или создавать свои собственные виджеты, используя те же инструменты и методы, которые использовала команда Flutter для создания инфраструктуры.  При разработке приложений чувствуются преимущества продуктивности высокоуровневой унифицированной концепции виджетов, не жертвуя возможностью погружения так глубоко, в нижние уровни.
Движок Flutter, написанный в основном на C++, обеспечивает низкоуровневую поддержку рендеринга с использованием графической библиотеки Skia от Google. Кроме того, он взаимодействует с моделью для конкретной платформы SDK, такими как Android и iOS.

Виджеты
Виджеты - это центральная иерархия классов в структуре Flutter. Виджет является неизменным описанием части пользовательского интерфейса. Сами виджеты не имеют изменяемого состояния (все их поля должны быть конечными). Если вы хотите связать изменяемое состояние с виджетом, рассмотрите возможность использования StatefulWidget, который создает объект State (через StatefulWidget.createState) всякий раз, когда он создается и включается в дерево. Данный виджет может быть включен в дерево ноль или более раз. В частности, данный виджет может быть размещен в дереве несколько раз. 
Widget({Key key })
Свойство key управляет тем, как один виджет заменяет другой виджет в дереве. Если свойства runtimeType и key двух виджетов имеют оператор ==, соответственно, то новый виджет заменяет старый виджет, обновляя базовый элемент (то есть вызывая Element.update с новым виджетом). В противном случае старый элемент удаляется из дерева, новый виджет преобразуется в элемент, а новый элемент вставляется в дерево.
Основные 3 типа виджетов на которых строится все приложение:

StatefulWidget - виджет с изменяемым состоянием. Состояние - это информация, которая может быть прочитана синхронно при построении виджета, и может измениться в течение времени жизни виджета. Чтобы уведомить об изменении состояния виджета - необходимо задать State.setState. Пример:

StatelessWidget, для виджетов, которые всегда строятся одинаково, учитывая конкретную конфигурацию и окружающее состояние. Пример:
InheritedWidget, для виджетов, которые вводят окружающее состояние, которое может быть прочитано виджетами-потомками (аналог пробрасывания props в ReactNative). Пример:

UI  – тоже код!
Для любых UI-элементов есть свой виджет. 
Пример простого приложения:

Больше информации об использовании данных виджетов в официальной документации.

Hot-reload
Примечательной особенностью платформы Dart является ее поддержка «Hot-reload», при которой изменения в исходных файлах могут быть внедрены в работающее приложение. Flutter расширяет это, поддерживая горячую перезагрузку с сохранением состояния, где в большинстве случаев изменения в исходном коде могут быть немедленно отражены в работающем приложении, не требуя перезапуска или потери состояния.   Эта функция, реализованная во Flutter, получила широкое признание.

Примечания
Ссылки
flutter.io — официальный сайт Flutter.